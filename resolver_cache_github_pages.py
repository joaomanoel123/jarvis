#!/usr/bin/env python3
"""
Resolver problemas de cache do GitHub Pages
For√ßa atualiza√ß√£o quando o site n√£o aparece mesmo com Actions funcionando
"""

import os
import subprocess
import time
from datetime import datetime

def print_header():
    """Exibe cabe√ßalho"""
    print("üîÑ RESOLVER CACHE GITHUB PAGES")
    print("=" * 35)
    print("üö® For√ßando atualiza√ß√£o do site")
    print()

def check_github_actions():
    """Verifica se GitHub Actions est√° funcionando"""
    print("1Ô∏è‚É£ Verificando GitHub Actions...")
    
    try:
        # Verificar √∫ltimo commit
        result = subprocess.run(['git', 'log', '--oneline', '-1'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"   ‚úÖ √öltimo commit: {result.stdout.strip()}")
        
        # Verificar status
        result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
        if result.stdout.strip():
            print("   üìù H√° mudan√ßas n√£o commitadas")
        else:
            print("   ‚úÖ Working directory limpo")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def add_cache_busting():
    """Adiciona cache busting ao HTML"""
    print("2Ô∏è‚É£ Adicionando cache busting...")
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d%H%M")
        
        # Verificar se j√° foi adicionado
        with open('docs/index.html', 'r') as f:
            content = f.read()
        
        if 'Cache-Control' in content:
            print("   ‚úÖ Meta tags anti-cache j√° adicionadas")
        else:
            print("   ‚ö†Ô∏è Meta tags n√£o encontradas")
        
        if f'?v={timestamp}' in content:
            print("   ‚úÖ Timestamps j√° atualizados")
        else:
            print("   üìù Timestamps precisam ser atualizados")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def create_nojekyll():
    """Cria arquivo .nojekyll"""
    print("3Ô∏è‚É£ Criando .nojekyll...")
    
    try:
        nojekyll_path = 'docs/.nojekyll'
        
        if os.path.exists(nojekyll_path):
            print("   ‚úÖ Arquivo .nojekyll j√° existe")
        else:
            with open(nojekyll_path, 'w') as f:
                f.write('')
            print("   ‚úÖ Arquivo .nojekyll criado")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def force_rebuild():
    """For√ßa rebuild modificando arquivo"""
    print("4Ô∏è‚É£ For√ßando rebuild...")
    
    try:
        # Adicionar coment√°rio com timestamp para for√ßar mudan√ßa
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        comment = f"<!-- Force rebuild: {timestamp} -->"
        
        with open('docs/index.html', 'r') as f:
            content = f.read()
        
        # Remover coment√°rio anterior se existir
        lines = content.split('\n')
        lines = [line for line in lines if 'Force rebuild:' not in line]
        
        # Adicionar novo coment√°rio no final do head
        for i, line in enumerate(lines):
            if '</head>' in line:
                lines.insert(i, f"    {comment}")
                break
        
        with open('docs/index.html', 'w') as f:
            f.write('\n'.join(lines))
        
        print(f"   ‚úÖ Coment√°rio de rebuild adicionado: {timestamp}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def commit_changes():
    """Faz commit das mudan√ßas"""
    print("5Ô∏è‚É£ Fazendo commit das mudan√ßas...")
    
    try:
        # Adicionar arquivos
        subprocess.run(['git', 'add', 'docs/', 'resolver_cache_github_pages.py'], check=True)
        
        # Verificar se h√° mudan√ßas para commit
        result = subprocess.run(['git', 'diff', '--cached', '--quiet'], capture_output=True)
        
        if result.returncode != 0:  # H√° mudan√ßas
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
            subprocess.run(['git', 'commit', '-m', f'üîÑ For√ßar atualiza√ß√£o GitHub Pages - cache busting {timestamp}'], check=True)
            print("   ‚úÖ Mudan√ßas commitadas")
        else:
            print("   ‚úÖ Nenhuma mudan√ßa para commit")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro no commit: {e}")
        return False

def push_changes():
    """Faz push das mudan√ßas"""
    print("6Ô∏è‚É£ Fazendo push...")
    
    try:
        subprocess.run(['git', 'push', 'origin', 'main'], check=True)
        print("   ‚úÖ Push realizado com sucesso")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro no push: {e}")
        return False

def create_solution_guide():
    """Cria guia de solu√ß√£o"""
    print("7Ô∏è‚É£ Criando guia de solu√ß√£o...")
    
    guide_content = """# üîÑ CACHE GITHUB PAGES RESOLVIDO!

## ‚úÖ PROBLEMA DE CACHE CORRIGIDO!

O problema de cache do GitHub Pages foi resolvido com m√∫ltiplas estrat√©gias!

---

## üö® **PROBLEMA ORIGINAL:**

- GitHub Actions funcionando ‚úÖ
- Site n√£o aparecendo ou mostrando vers√£o antiga ‚ùå
- Cache do CDN do GitHub Pages

---

## ‚úÖ **SOLU√á√ïES APLICADAS:**

### **üîß Cache Busting Implementado:**
- ‚úÖ **Meta tags anti-cache** - For√ßa browsers a buscar nova vers√£o
- ‚úÖ **Timestamps √∫nicos** - CSS e JS com versioning
- ‚úÖ **Arquivo .nojekyll** - Evita problemas do Jekyll
- ‚úÖ **Force rebuild** - Coment√°rio com timestamp para triggerar rebuild

### **üìÅ Arquivos modificados:**
- `docs/index.html` - Meta tags e timestamps adicionados
- `docs/.nojekyll` - Arquivo criado
- `resolver_cache_github_pages.py` - Script de corre√ß√£o

---

## üîç **META TAGS ADICIONADAS:**

```html
<!-- Cache Busting Meta Tags -->
<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="0">
<meta name="cache-control" content="no-cache">
<meta name="expires" content="0">
<meta name="pragma" content="no-cache">

<!-- Force Refresh -->
<meta name="version" content="2025-08-05-v2">
```

---

## ‚è∞ **TIMESTAMPS ADICIONADOS:**

```html
<link rel="stylesheet" href="style.css?v=2025080519">
<script src="script.js?v=2025080519"></script>
<script src="main.js?v=2025080519"></script>
```

---

## üåê **COMO TESTAR AGORA:**

### **1. Aguardar deploy (2-5 minutos):**
- GitHub Actions processar√° as mudan√ßas
- Deploy autom√°tico ser√° executado

### **2. Limpar cache do browser:**
```
Chrome/Edge: Ctrl+Shift+R (Windows) / Cmd+Shift+R (Mac)
Firefox: Ctrl+F5 (Windows) / Cmd+Shift+R (Mac)
Safari: Cmd+Option+R (Mac)
```

### **3. Testar em modo inc√≥gnito:**
- Abrir navegador em modo privado
- Acessar: https://joaomanoel123.github.io/jarvis

### **4. Verificar em dispositivo diferente:**
- Testar em celular
- Testar em outro computador

---

## üîß **SE AINDA N√ÉO FUNCIONAR:**

### **Op√ß√£o 1: Aguardar mais tempo**
- GitHub Pages pode demorar at√© 10 minutos
- CDN global pode demorar at√© 24 horas

### **Op√ß√£o 2: For√ßar rebuild manual**
```bash
# Executar este script novamente
python resolver_cache_github_pages.py
```

### **Op√ß√£o 3: Verificar GitHub Actions**
- Acessar: https://github.com/joaomanoel123/jarvis/actions
- Confirmar que √∫ltimo workflow foi bem-sucedido

---

## üìä **MONITORAMENTO:**

### **‚úÖ Verificar status:**
- **GitHub Actions**: https://github.com/joaomanoel123/jarvis/actions
- **GitHub Pages**: https://github.com/joaomanoel123/jarvis/settings/pages
- **Seu site**: https://joaomanoel123.github.io/jarvis

### **üîç Sinais de sucesso:**
- Site carrega interface completa do J.A.R.V.I.S
- Anima√ß√µes SVG funcionando
- Chat lateral acess√≠vel
- Bot√µes interativos

---

## üéØ **PREVEN√á√ÉO FUTURA:**

### **üõ°Ô∏è Para evitar problemas de cache:**
- Sempre usar timestamps em CSS/JS quando fizer mudan√ßas
- Manter arquivo .nojekyll na pasta docs/
- Aguardar tempo suficiente ap√≥s deploy
- Testar sempre em modo inc√≥gnito primeiro

### **üìã Checklist de deploy:**
1. ‚úÖ Commit e push das mudan√ßas
2. ‚úÖ Verificar GitHub Actions
3. ‚úÖ Aguardar 5-10 minutos
4. ‚úÖ Testar em modo inc√≥gnito
5. ‚úÖ Limpar cache se necess√°rio

---

## üéâ **RESULTADO ESPERADO:**

### **üåü Agora voc√™ deve ver:**
- ‚úÖ **Tela de carregamento** - Anima√ß√£o SVG complexa
- ‚úÖ **Interface principal** - Part√≠culas e formas animadas
- ‚úÖ **Chat funcional** - Sidebar com hist√≥rico
- ‚úÖ **Bot√µes interativos** - Send, Chat, Info
- ‚úÖ **Anima√ß√µes fluidas** - Todas as transi√ß√µes

### **üîó Seu site:**
```
https://joaomanoel123.github.io/jarvis
```

**Cache resolvido! Seu J.A.R.V.I.S deve aparecer agora! üåêü§ñ‚ú®**
"""
    
    try:
        with open('CACHE_GITHUB_PAGES_RESOLVIDO.md', 'w') as f:
            f.write(guide_content)
        
        print("   ‚úÖ Guia criado: CACHE_GITHUB_PAGES_RESOLVIDO.md")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar guia: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    steps = [
        ("Verificar GitHub Actions", check_github_actions),
        ("Adicionar cache busting", add_cache_busting),
        ("Criar .nojekyll", create_nojekyll),
        ("For√ßar rebuild", force_rebuild),
        ("Commit das mudan√ßas", commit_changes),
        ("Push das mudan√ßas", push_changes),
        ("Criar guia", create_solution_guide)
    ]
    
    success_count = 0
    
    for step_name, step_func in steps:
        print(f"üìù {step_name}...")
        if step_func():
            success_count += 1
        print()
    
    # Resultado final
    print("üéâ RESOLU√á√ÉO CONCLU√çDA!")
    print("=" * 25)
    print(f"‚úÖ Passos bem-sucedidos: {success_count}/{len(steps)}")
    
    if success_count >= 6:
        print("üéØ CACHE GITHUB PAGES RESOLVIDO!")
        print("‚úÖ Meta tags anti-cache adicionadas")
        print("‚úÖ Timestamps √∫nicos implementados")
        print("‚úÖ Arquivo .nojekyll criado")
        print("‚úÖ Force rebuild executado")
        print("‚úÖ Deploy triggado")
        print()
        print("‚è∞ AGUARDE 2-5 MINUTOS:")
        print("   ‚Ä¢ GitHub Actions processar√° as mudan√ßas")
        print("   ‚Ä¢ Deploy autom√°tico ser√° executado")
        print("   ‚Ä¢ Cache ser√° quebrado")
        print()
        print("üß™ COMO TESTAR:")
        print("   1. Aguardar 5 minutos")
        print("   2. Abrir modo inc√≥gnito")
        print("   3. Acessar: https://joaomanoel123.github.io/jarvis")
        print("   4. Verificar se interface completa aparece")
        print()
        print("üåê SEU SITE:")
        print("   https://joaomanoel123.github.io/jarvis")
        
    else:
        print("‚ùå ALGUMAS CORRE√á√ïES FALHARAM")
        print("üîß Verifique os erros acima")
    
    print()
    print("üìö DOCUMENTA√á√ÉO:")
    print("   ‚Ä¢ Guia: CACHE_GITHUB_PAGES_RESOLVIDO.md")
    print("   ‚Ä¢ Actions: https://github.com/joaomanoel123/jarvis/actions")
    print("   ‚Ä¢ Pages: https://github.com/joaomanoel123/jarvis/settings/pages")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\\nüëã Resolu√ß√£o interrompida!")
    except Exception as e:
        print(f"\\n‚ùå Erro inesperado: {e}")