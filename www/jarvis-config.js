/**\n * Jarvis Configuration Module\n * Configurações centralizadas para o assistente Jarvis\n * Compatível com GitHub Pages e desenvolvimento local\n */\n\nclass JarvisConfig {\n    constructor() {\n        this.isGitHubPages = window.location.hostname.includes('github.io');\n        this.isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n        this.isHTTPS = window.location.protocol === 'https:';\n        \n        // URLs da API - CONFIGURE AQUI A URL CORRETA\n        this.API_URLS = {\n            production: 'https://jarvis-api.onrender.com', // URL baseada no render.yaml\n            development: 'http://localhost:8000',\n            fallback: 'https://jarvis-api-joao-manoel.onrender.com' // URL alternativa\n        };\n        \n        this.settings = {\n            // Configurações de API\n            apiTimeout: 45000, // 45 segundos para cold start do Render\n            maxRetries: 3,\n            retryDelay: 2000,\n            \n            // Configurações de voz\n            speechRecognition: {\n                language: 'pt-BR',\n                continuous: false,\n                interimResults: true,\n                timeout: 10000\n            },\n            \n            // Configurações de TTS\n            textToSpeech: {\n                rate: 1.0,\n                pitch: 1.0,\n                volume: 0.8,\n                autoSpeak: true\n            },\n            \n            // Configurações de interface\n            ui: {\n                animationDuration: 1000,\n                messageDisplayTime: 5000,\n                autoHideLoader: true\n            }\n        };\n        \n        this.init();\n    }\n    \n    init() {\n        console.log('⚙️ Inicializando configurações do Jarvis...');\n        console.log('🌐 Ambiente:', this.getEnvironment());\n        console.log('🔗 URL da API:', this.getApiUrl());\n        console.log('🔒 HTTPS:', this.isHTTPS ? '✅' : '❌');\n        \n        // Carregar configurações salvas\n        this.loadSavedSettings();\n        \n        // Tornar disponível globalmente\n        window.jarvisConfig = this;\n    }\n    \n    getEnvironment() {\n        if (this.isGitHubPages) return 'GitHub Pages';\n        if (this.isLocalhost) return 'Local Development';\n        return 'Production';\n    }\n    \n    getApiUrl() {\n        // Verificar se há URL personalizada salva\n        const customUrl = localStorage.getItem('JARVIS_API_URL');\n        if (customUrl && customUrl.trim()) {\n            return customUrl.trim();\n        }\n        \n        // Usar URL baseada no ambiente\n        if (this.isLocalhost) {\n            return this.API_URLS.development;\n        }\n        \n        return this.API_URLS.production;\n    }\n    \n    setApiUrl(url) {\n        if (!url || !url.trim()) {\n            localStorage.removeItem('JARVIS_API_URL');\n            console.log('🔄 URL da API resetada para padrão');\n        } else {\n            localStorage.setItem('JARVIS_API_URL', url.trim());\n            console.log('💾 URL da API salva:', url.trim());\n        }\n    }\n    \n    loadSavedSettings() {\n        try {\n            const saved = localStorage.getItem('JARVIS_SETTINGS');\n            if (saved) {\n                const parsedSettings = JSON.parse(saved);\n                this.settings = { ...this.settings, ...parsedSettings };\n                console.log('⚙️ Configurações carregadas do localStorage');\n            }\n        } catch (error) {\n            console.warn('⚠️ Erro ao carregar configurações:', error);\n        }\n    }\n    \n    saveSettings() {\n        try {\n            localStorage.setItem('JARVIS_SETTINGS', JSON.stringify(this.settings));\n            console.log('💾 Configurações salvas');\n        } catch (error) {\n            console.warn('⚠️ Erro ao salvar configurações:', error);\n        }\n    }\n    \n    // Métodos de configuração específicos\n    setSpeechLanguage(language) {\n        this.settings.speechRecognition.language = language;\n        this.saveSettings();\n        console.log('🌍 Idioma de reconhecimento alterado para:', language);\n    }\n    \n    setTTSSettings(rate, pitch, volume) {\n        this.settings.textToSpeech.rate = rate || this.settings.textToSpeech.rate;\n        this.settings.textToSpeech.pitch = pitch || this.settings.textToSpeech.pitch;\n        this.settings.textToSpeech.volume = volume || this.settings.textToSpeech.volume;\n        this.saveSettings();\n        console.log('🔊 Configurações TTS atualizadas');\n    }\n    \n    // Diagnóstico do sistema\n    async diagnose() {\n        console.log('🔍 Executando diagnóstico completo...');\n        \n        const diagnosis = {\n            environment: this.getEnvironment(),\n            apiUrl: this.getApiUrl(),\n            isHTTPS: this.isHTTPS,\n            speechRecognitionSupported: 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window,\n            speechSynthesisSupported: 'speechSynthesis' in window,\n            userAgent: navigator.userAgent,\n            language: navigator.language,\n            onLine: navigator.onLine,\n            cookiesEnabled: navigator.cookieEnabled,\n            timestamp: new Date().toISOString()\n        };\n        \n        // Testar conectividade com a API\n        try {\n            const response = await fetch(this.getApiUrl() + '/health', {\n                method: 'GET',\n                timeout: 10000\n            });\n            diagnosis.apiConnectivity = response.ok;\n            diagnosis.apiStatus = response.status;\n        } catch (error) {\n            diagnosis.apiConnectivity = false;\n            diagnosis.apiError = error.message;\n        }\n        \n        console.log('📊 Diagnóstico completo:', diagnosis);\n        return diagnosis;\n    }\n    \n    // Configurações rápidas\n    showQuickSettings() {\n        const options = [\n            '🔧 Configurar URL da API',\n            '🌍 Alterar idioma de reconhecimento',\n            '🔊 Configurações de voz',\n            '🧪 Testar conectividade',\n            '📊 Executar diagnóstico',\n            '🔄 Resetar configurações',\n            '❌ Cancelar'\n        ];\n        \n        const choice = prompt(`Configurações Rápidas do Jarvis:\\\n\\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\\n')}\\\n\\\nEscolha uma opção (1-${options.length}):`);\n        \n        switch(choice) {\n            case '1':\n                this.configureApiUrl();\n                break;\n            case '2':\n                this.configureLanguage();\n                break;\n            case '3':\n                this.configureTTS();\n                break;\n            case '4':\n                this.testConnectivity();\n                break;\n            case '5':\n                this.showDiagnosis();\n                break;\n            case '6':\n                this.resetSettings();\n                break;\n        }\n    }\n    \n    configureApiUrl() {\n        const current = this.getApiUrl();\n        const newUrl = prompt(`URL da API do Jarvis:\\\n\\\nAtual: ${current}\\\n\\\nDigite a nova URL ou deixe vazio para usar padrão:`, current);\n        \n        if (newUrl !== null) {\n            this.setApiUrl(newUrl);\n            alert(`✅ URL configurada: ${this.getApiUrl()}`);\n        }\n    }\n    \n    configureLanguage() {\n        const languages = [\n            'pt-BR - Português (Brasil)',\n            'pt-PT - Português (Portugal)',\n            'en-US - English (US)',\n            'en-GB - English (UK)',\n            'es-ES - Español',\n            'fr-FR - Français'\n        ];\n        \n        const choice = prompt(`Idioma de reconhecimento:\\\n\\\n${languages.map((lang, i) => `${i + 1}. ${lang}`).join('\\\n')}\\\n\\\nEscolha (1-${languages.length}):`);\n        \n        const langCodes = ['pt-BR', 'pt-PT', 'en-US', 'en-GB', 'es-ES', 'fr-FR'];\n        const index = parseInt(choice) - 1;\n        \n        if (index >= 0 && index < langCodes.length) {\n            this.setSpeechLanguage(langCodes[index]);\n            alert(`✅ Idioma alterado para: ${languages[index]}`);\n        }\n    }\n    \n    configureTTS() {\n        const rate = prompt('Velocidade da fala (0.1 - 2.0):', this.settings.textToSpeech.rate);\n        const pitch = prompt('Tom da voz (0.0 - 2.0):', this.settings.textToSpeech.pitch);\n        const volume = prompt('Volume (0.0 - 1.0):', this.settings.textToSpeech.volume);\n        \n        this.setTTSSettings(\n            parseFloat(rate) || this.settings.textToSpeech.rate,\n            parseFloat(pitch) || this.settings.textToSpeech.pitch,\n            parseFloat(volume) || this.settings.textToSpeech.volume\n        );\n        \n        alert('✅ Configurações de voz atualizadas!');\n    }\n    \n    async testConnectivity() {\n        const apiUrl = this.getApiUrl();\n        \n        try {\n            const response = await fetch(apiUrl + '/health', {\n                method: 'GET',\n                timeout: 10000\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                alert(`✅ Conectividade OK!\\\n\\\nStatus: ${data.status}\\\nAPI: ${data.api_provider}\\\nConfigurada: ${data.api_configured}`);\n            } else {\n                alert(`❌ Erro de conectividade!\\\n\\\nStatus: ${response.status}\\\nURL: ${apiUrl}`);\n            }\n        } catch (error) {\n            alert(`❌ Falha na conectividade!\\\n\\\nErro: ${error.message}\\\nURL: ${apiUrl}`);\n        }\n    }\n    \n    async showDiagnosis() {\n        const diagnosis = await this.diagnose();\n        \n        const report = `🔍 Diagnóstico do Sistema Jarvis\\\n\\\n` +\n            `🌐 Ambiente: ${diagnosis.environment}\\\n` +\n            `🔗 API: ${diagnosis.apiUrl}\\\n` +\n            `📡 Conectividade: ${diagnosis.apiConnectivity ? '✅' : '❌'}\\\n` +\n            `🔒 HTTPS: ${diagnosis.isHTTPS ? '✅' : '❌'}\\\n` +\n            `🎤 Speech Recognition: ${diagnosis.speechRecognitionSupported ? '✅' : '❌'}\\\n` +\n            `🔊 Text-to-Speech: ${diagnosis.speechSynthesisSupported ? '✅' : '❌'}\\\n` +\n            `🌍 Idioma: ${diagnosis.language}\\\n` +\n            `📶 Online: ${diagnosis.onLine ? '✅' : '❌'}`;\n        \n        alert(report);\n    }\n    \n    resetSettings() {\n        if (confirm('🔄 Resetar todas as configurações para o padrão?')) {\n            localStorage.removeItem('JARVIS_SETTINGS');\n            localStorage.removeItem('JARVIS_API_URL');\n            location.reload();\n        }\n    }\n}\n\n// Inicializar configurações quando o documento estiver pronto\n$(document).ready(function() {\n    window.jarvisConfig = new JarvisConfig();\n    console.log('⚙️ Jarvis Config inicializado!');\n});\n\n// Exportar para uso em outros scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = JarvisConfig;\n}"