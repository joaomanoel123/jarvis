$(document).ready(function () {\n\n    // Aguardar configurações serem carregadas\n    setTimeout(() => {\n        initializeJarvis();\n    }, 500);\n    \n    function initializeJarvis() {\n        console.log('🤖 Inicializando Jarvis para GitHub Pages...');\n        \n        // Verificar se as configurações estão disponíveis\n        if (!window.jarvisConfig) {\n            console.error('❌ Configurações não carregadas!');\n            return;\n        }\n        \n        const config = window.jarvisConfig;\n        console.log('🌐 Ambiente:', config.getEnvironment());\n        console.log('🔗 API URL:', config.getApiUrl());\n        \n        // Inicializar sequência de startup para GitHub Pages\n        startGitHubPagesSequence();\n        \n        // Configurar animações de texto (com fallback)\n        setupTextAnimations();\n        \n        // Configurar SiriWave\n        setupSiriWave();\n        \n        // Configurar event listeners\n        setupEventListeners();\n        \n        console.log('✅ Jarvis inicializado com sucesso!');\n    }\n    \n    function startGitHubPagesSequence() {\n        console.log('🚀 Iniciando sequência de startup...');\n        \n        // Sequência de inicialização simulando o backend\n        setTimeout(() => {\n            console.log('👤 Iniciando Face Auth...');\n            $(\"#Loader\").attr(\"hidden\", true);\n            $(\"#FaceAuth\").attr(\"hidden\", false);\n            $(\"#WishMessage\").text(\"Autenticando...\");\n        }, 2000);\n        \n        setTimeout(() => {\n            console.log('✅ Face Auth Success...');\n            $(\"#FaceAuth\").attr(\"hidden\", true);\n            $(\"#FaceAuthSuccess\").attr(\"hidden\", false);\n            $(\"#WishMessage\").text(\"Autenticação bem-sucedida!\");\n        }, 4000);\n        \n        setTimeout(() => {\n            console.log('👋 Hello Greet...');\n            $(\"#FaceAuthSuccess\").attr(\"hidden\", true);\n            $(\"#HelloGreet\").attr(\"hidden\", false);\n            $(\"#WishMessage\").text(\"Olá, bem-vindo João Manoel!\");\n        }, 6000);\n        \n        setTimeout(() => {\n            console.log('🎯 Carregando interface principal...');\n            $(\"#Start\").attr(\"hidden\", true);\n            $(\"#Oval\").addClass(\"animate__animated animate__zoomIn\");\n            $(\"#Oval\").attr(\"hidden\", false);\n            $(\"#WishMessage\").text(\"Ask me anything\");\n            \n            // Falar mensagem de boas-vindas se TTS estiver disponível\n            if (window.jarvisTTS && window.jarvisTTS.isEnabled) {\n                setTimeout(() => {\n                    window.jarvisTTS.speak(\"Olá João Manoel! Como posso ajudá-lo hoje?\");\n                }, 1000);\n            }\n        }, 8000);\n    }\n    \n    function setupTextAnimations() {\n        // Verificar se textillate está disponível\n        if (typeof $.fn.textillate === 'function') {\n            try {\n                $('.text').textillate({\n                    loop: true,\n                    sync: true,\n                    in: {\n                        effect: \"bounceIn\",\n                    },\n                    out: {\n                        effect: \"bounceOut\",\n                    },\n                });\n\n                $('.siri-message').textillate({\n                    loop: true,\n                    sync: true,\n                    in: {\n                        effect: \"fadeInUp\",\n                    },\n                    out: {\n                        effect: \"fadeOutUp\",\n                    },\n                });\n                console.log('🎨 Animações de texto configuradas com textillate');\n            } catch (error) {\n                console.warn('⚠️ Erro ao configurar textillate:', error);\n                setupFallbackAnimations();\n            }\n        } else {\n            console.warn('⚠️ Textillate não disponível, usando animações CSS básicas');\n            setupFallbackAnimations();\n        }\n    }\n    \n    function setupFallbackAnimations() {\n        // Fallback para animações CSS simples\n        $('.text, .siri-message').addClass('animate__animated animate__fadeIn');\n        console.log('🎨 Animações CSS básicas configuradas');\n    }\n    \n    let siriWave = null;\n    \n    function setupSiriWave() {\n        const container = document.getElementById(\"siri-container\");\n        if (container && typeof SiriWave !== 'undefined') {\n            try {\n                siriWave = new SiriWave({\n                    container: container,\n                    width: container.clientWidth || 320,\n                    height: 160,\n                    style: \"ios9\",\n                    amplitude: 1,\n                    speed: 0.30,\n                    autostart: true\n                });\n                \n                window.addEventListener('resize', function() {\n                    if (siriWave) {\n                        siriWave.setWidth(container.clientWidth || 320);\n                        siriWave.setHeight(160);\n                    }\n                });\n                \n                console.log('🌊 SiriWave configurado');\n            } catch (error) {\n                console.warn('⚠️ Erro ao configurar SiriWave:', error);\n            }\n        } else {\n            console.warn('⚠️ SiriWave não disponível');\n        }\n    }\n    \n    function setupEventListeners() {\n        // Botão do microfone\n        $(\"#MicBtn\").click(function () {\n            console.log('🎤 Botão de microfone clicado');\n            startSpeechRecognition();\n        });\n        \n        // Botão de envio\n        $(\"#SendBtn\").click(function () {\n            const message = $(\"#chatbox\").val().trim();\n            if (message) {\n                sendMessage(message);\n            }\n        });\n        \n        // Campo de texto\n        $(\"#chatbox\").keyup(function () {\n            const message = $(\"#chatbox\").val();\n            toggleSendButton(message);\n        });\n        \n        $(\"#chatbox\").keypress(function (e) {\n            if (e.which === 13) { // Enter\n                const message = $(\"#chatbox\").val().trim();\n                if (message) {\n                    sendMessage(message);\n                }\n            }\n        });\n        \n        // Botão de configurações\n        $(\"#SettingsBtn\").click(function () {\n            if (window.jarvisConfig) {\n                window.jarvisConfig.showQuickSettings();\n            }\n        });\n        \n        // Atalhos de teclado\n        document.addEventListener('keyup', function(e) {\n            // Cmd+J (Mac) ou Ctrl+J (Windows/Linux) para ativar microfone\n            if (e.key === 'j' && (e.metaKey || e.ctrlKey)) {\n                e.preventDefault();\n                console.log('⌨️ Atalho de voz ativado (Cmd/Ctrl+J)');\n                startSpeechRecognition();\n            }\n            \n            // Espaço para ativar microfone (apenas se não estiver digitando)\n            if (e.code === 'Space' && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {\n                e.preventDefault();\n                console.log('⌨️ Atalho de voz ativado (Espaço)');\n                startSpeechRecognition();\n            }\n        });\n    }\n    \n    function toggleSendButton(message) {\n        if (message.length === 0) {\n            $(\"#MicBtn\").attr('hidden', false);\n            $(\"#SendBtn\").attr('hidden', true);\n        } else {\n            $(\"#MicBtn\").attr('hidden', true);\n            $(\"#SendBtn\").attr('hidden', false);\n        }\n    }\n    \n    function startSpeechRecognition() {\n        console.log('🎤 Iniciando reconhecimento de voz...');\n        \n        // Verificar se o sistema de reconhecimento está disponível\n        if (!window.jarvisSpeechRecognition || !window.jarvisSpeechRecognition.isAvailable()) {\n            console.warn('⚠️ Sistema de reconhecimento de voz não disponível');\n            $(\"#WishMessage\").text(\"Reconhecimento de voz não disponível. Use o campo de texto.\");\n            \n            setTimeout(() => {\n                $(\"#WishMessage\").text(\"Ask me anything\");\n            }, 3000);\n            return;\n        }\n        \n        const speechRecognition = window.jarvisSpeechRecognition;\n        \n        // Se já está ativo, parar\n        if (speechRecognition.isActive()) {\n            console.log('🛑 Parando reconhecimento ativo...');\n            speechRecognition.stop();\n            resetInterface();\n            return;\n        }\n        \n        // Configurar callbacks\n        speechRecognition.onStart(() => {\n            console.log('🎤 Reconhecimento iniciado');\n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            \n            // Ativar SiriWave\n            if (siriWave) {\n                siriWave.start();\n            }\n            \n            // Atualizar visual do botão\n            $('#MicBtn').html('<i class=\"bi bi-mic-fill\"></i>');\n            $('#MicBtn').css('background', 'rgba(255, 0, 0, 0.3)');\n            $(\"#WishMessage\").text(\"Escutando... Fale agora!\");\n        });\n        \n        speechRecognition.onInterim((transcript) => {\n            console.log('⏳ Transcrição parcial:', transcript);\n            $(\"#WishMessage\").text(`Ouvindo: \"${transcript}\"`);\n        });\n        \n        speechRecognition.onResult((transcript, confidence) => {\n            console.log('✅ Transcrição final:', transcript);\n            console.log('🎯 Confiança:', (confidence * 100).toFixed(1) + '%');\n            \n            if (transcript.trim()) {\n                $(\"#chatbox\").val(transcript);\n                $(\"#WishMessage\").text(`Processando: \"${transcript}\"`);\n                \n                // Processar comando automaticamente\n                setTimeout(() => {\n                    sendMessage(transcript);\n                }, 500);\n            }\n        });\n        \n        speechRecognition.onError((error, message) => {\n            console.error('❌ Erro no reconhecimento:', error, message);\n            $(\"#WishMessage\").text(`Erro: ${message}`);\n            resetInterface();\n            \n            // Voltar para interface principal após erro\n            setTimeout(() => {\n                $(\"#SiriWave\").attr(\"hidden\", true);\n                $(\"#Oval\").attr(\"hidden\", false);\n                $(\"#WishMessage\").text(\"Ask me anything\");\n            }, 3000);\n        });\n        \n        speechRecognition.onEnd(() => {\n            console.log('🛑 Reconhecimento finalizado');\n            resetInterface();\n        });\n        \n        // Iniciar reconhecimento\n        const started = speechRecognition.start();\n        if (!started) {\n            console.error('❌ Falha ao iniciar reconhecimento');\n            resetInterface();\n        }\n    }\n    \n    function resetInterface() {\n        $('#MicBtn').html('<i class=\"bi bi-mic\"></i>');\n        $('#MicBtn').css('background', '');\n        \n        // Parar SiriWave\n        if (siriWave) {\n            siriWave.stop();\n        }\n    }\n    \n    function sendMessage(message) {\n        if (!message || !message.trim()) {\n            return;\n        }\n        \n        console.log('📤 Enviando mensagem:', message);\n        \n        // Verificar comandos locais primeiro\n        if (handleLocalCommands(message)) {\n            return;\n        }\n        \n        // Mostrar interface de processamento\n        $(\"#Oval\").attr(\"hidden\", true);\n        $(\"#SiriWave\").attr(\"hidden\", false);\n        \n        // Ativar SiriWave\n        if (siriWave) {\n            siriWave.start();\n        }\n        \n        $(\"#WishMessage\").text(\"Processando sua mensagem...\");\n        \n        // Enviar para API\n        sendToAPI(message)\n            .then(response => {\n                console.log('✅ Resposta recebida:', response);\n                $(\"#WishMessage\").text(response);\n                \n                // Falar resposta se TTS estiver ativo\n                if (window.jarvisTTS && window.jarvisTTS.isEnabled) {\n                    window.jarvisTTS.speak(response);\n                }\n            })\n            .catch(error => {\n                console.error('❌ Erro na API:', error);\n                $(\"#WishMessage\").text(`Erro: ${error.message}`);\n            })\n            .finally(() => {\n                // Parar SiriWave\n                if (siriWave) {\n                    siriWave.stop();\n                }\n                \n                // Limpar input e resetar botões\n                $(\"#chatbox\").val(\"\");\n                $(\"#MicBtn\").attr('hidden', false);\n                $(\"#SendBtn\").attr('hidden', true);\n                \n                // Voltar para a tela principal após 5 segundos\n                setTimeout(() => {\n                    $(\"#SiriWave\").attr(\"hidden\", true);\n                    $(\"#Oval\").attr(\"hidden\", false);\n                    $(\"#WishMessage\").text(\"Ask me anything\");\n                }, 5000);\n            });\n    }\n    \n    function handleLocalCommands(message) {\n        const msg = message.toLowerCase().trim();\n        console.log('🔍 Verificando comando local:', msg);\n        \n        // Comandos do WhatsApp - Detecção ampla\n        const whatsappKeywords = [\n            'whatsapp', 'whats app', 'whats', 'zap', 'zapzap',\n            'abrir whatsapp', 'abra whatsapp', 'abre whatsapp',\n            'abrir whats', 'abra whats', 'abre whats'\n        ];\n        \n        if (whatsappKeywords.some(keyword => msg.includes(keyword))) {\n            console.log('✅ Comando WhatsApp detectado!');\n            window.open('https://web.whatsapp.com', '_blank');\n            $(\"#WishMessage\").text(\"Abrindo WhatsApp Web...\");\n            \n            if (window.jarvisTTS && window.jarvisTTS.isEnabled) {\n                window.jarvisTTS.speak(\"Abrindo WhatsApp Web para você\");\n            }\n            \n            return true;\n        }\n        \n        // Comando Google\n        if (msg.includes('google') || msg.includes('pesquisar google') || msg.includes('pesquise google')) {\n            console.log('✅ Comando Google detectado!');\n            window.open('https://www.google.com', '_blank');\n            $(\"#WishMessage\").text(\"Abrindo Google...\");\n            \n            if (window.jarvisTTS && window.jarvisTTS.isEnabled) {\n                window.jarvisTTS.speak(\"Abrindo Google para você\");\n            }\n            \n            return true;\n        }\n        \n        // Comando YouTube\n        if (msg.includes('youtube')) {\n            console.log('✅ Comando YouTube detectado!');\n            window.open('https://www.youtube.com', '_blank');\n            $(\"#WishMessage\").text(\"Abrindo YouTube...\");\n            \n            if (window.jarvisTTS && window.jarvisTTS.isEnabled) {\n                window.jarvisTTS.speak(\"Abrindo YouTube para você\");\n            }\n            \n            return true;\n        }\n        \n        // Comando de configurações\n        if (msg.includes('configurações') || msg.includes('configuracao') || msg.includes('settings')) {\n            console.log('✅ Comando de configurações detectado!');\n            if (window.jarvisConfig) {\n                window.jarvisConfig.showQuickSettings();\n            }\n            return true;\n        }\n        \n        console.log('ℹ️ Nenhum comando local detectado, enviando para API');\n        return false;\n    }\n    \n    async function sendToAPI(message) {\n        const config = window.jarvisConfig;\n        const apiUrl = config.getApiUrl();\n        \n        console.log('📡 Enviando para API:', apiUrl);\n        \n        // Timeout mais longo para cold start do Render\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), config.settings.apiTimeout);\n        \n        try {\n            const response = await fetch(apiUrl + '/command', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({ message }),\n                signal: controller.signal\n            });\n            \n            clearTimeout(timeoutId);\n            \n            if (!response.ok) {\n                if (response.status === 503) {\n                    throw new Error('Servidor temporariamente indisponível (cold start). Tente novamente em alguns segundos.');\n                } else if (response.status === 500) {\n                    throw new Error('Erro interno do servidor. Verifique se a chave API está configurada.');\n                } else {\n                    throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);\n                }\n            }\n            \n            const data = await response.json();\n            \n            if (data && data.reply) {\n                return data.reply;\n            } else if (data && data.error) {\n                throw new Error(data.reply || 'Erro na API');\n            } else {\n                throw new Error('Resposta inválida da API');\n            }\n            \n        } catch (error) {\n            clearTimeout(timeoutId);\n            \n            if (error.name === 'AbortError') {\n                throw new Error('Timeout: A API demorou muito para responder. O servidor pode estar iniciando (cold start). Tente novamente em 30 segundos.');\n            } else if (error.message.includes('Failed to fetch')) {\n                throw new Error('Erro de conexão: Verifique sua internet ou se a API está disponível.');\n            } else {\n                throw error;\n            }\n        }\n    }\n    \n    // Registrar Service Worker para PWA\n    if (\"serviceWorker\" in navigator && window.location.hostname.includes(\"github.io\")) {\n        window.addEventListener(\"load\", function() {\n            navigator.serviceWorker.register(\"/jarvis/sw.js\")\n                .then(function(registration) {\n                    console.log(\"✅ Service Worker registrado:\", registration.scope);\n                })\n                .catch(function(error) {\n                    console.log(\"❌ Falha ao registrar Service Worker:\", error);\n                });\n        });\n    }\n    \n    console.log('🎯 Event listeners configurados!');\n});