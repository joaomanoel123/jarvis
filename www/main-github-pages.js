$(document).ready(function () {\n\n    // Configura√ß√£o para GitHub Pages\n    const isGitHubPages = window.location.hostname.includes('github.io');\n    const API_URL = isGitHubPages ? \n        'https://jarvis-api-joao-manoel.onrender.com' : // URL da API no Render\n        'http://localhost:8000'; // URL local para desenvolvimento\n\n    console.log('ü§ñ Jarvis iniciando...');\n    console.log('üåê Modo:', isGitHubPages ? 'GitHub Pages' : 'Local');\n    console.log('üîó API URL:', API_URL);\n\n    // Inicializar apenas se n√£o estiver no GitHub Pages\n    if (!isGitHubPages && typeof eel !== 'undefined') {\n        eel.init()()\n    }\n\n    $('.text').textillate({\n        loop: true,\n        sync: true,\n        in: {\n            effect: \"bounceIn\",\n        },\n        out: {\n            effect: \"bounceOut\",\n        },\n    });\n\n    // Siri configuration\n    var container = document.getElementById(\"siri-container\");\n    if (container) {\n        var sw = new SiriWave({\n            container: container,\n            width: container.clientWidth || 320,\n            height: 160,\n            style: \"ios9\",\n            amplitude: 1,\n            speed: 0.30,\n            autostart: true\n        });\n        window.addEventListener('resize', function() {\n            sw.setWidth(container.clientWidth || 320);\n            sw.setHeight(160);\n        });\n    }\n\n    // Siri message animation\n    $('.siri-message').textillate({\n        loop: true,\n        sync: true,\n        in: {\n            effect: \"fadeInUp\",\n            sync: true,\n        },\n        out: {\n            effect: \"fadeOutUp\",\n            sync: true,\n        },\n    });\n\n    // Fun√ß√£o para exibir mensagens na interface\n    function displayMessage(message, isUser = false) {\n        const chatBody = document.getElementById('chat-canvas-body');\n        if (chatBody) {\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `message ${isUser ? 'user-message' : 'jarvis-message'}`;\n            messageDiv.innerHTML = `\n                <div class=\"message-content\">\n                    <strong>${isUser ? 'Voc√™' : 'Jarvis'}:</strong> ${message}\n                </div>\n                <div class=\"message-time\">${new Date().toLocaleTimeString()}</div>\n            `;\n            chatBody.appendChild(messageDiv);\n            chatBody.scrollTop = chatBody.scrollHeight;\n        }\n\n        // Atualizar mensagem principal\n        const wishMessage = document.getElementById('WishMessage');\n        if (wishMessage && !isUser) {\n            wishMessage.textContent = message;\n        }\n    }\n\n    // Fun√ß√£o para fazer chamada √† API\n    async function callAPI(message) {\n        try {\n            console.log('üì§ Enviando para API:', message);\n            \n            const response = await fetch(`${API_URL}/command`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message: message })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            console.log('üì• Resposta da API:', data);\n            \n            if (data.reply) {\n                displayMessage(data.reply, false);\n                \n                // S√≠ntese de voz (se dispon√≠vel)\n                if ('speechSynthesis' in window) {\n                    const utterance = new SpeechSynthesisUtterance(data.reply);\n                    utterance.lang = 'pt-BR';\n                    utterance.rate = 0.9;\n                    speechSynthesis.speak(utterance);\n                }\n            } else {\n                displayMessage('Desculpe, n√£o consegui processar sua solicita√ß√£o.', false);\n            }\n        } catch (error) {\n            console.error('‚ùå Erro na API:', error);\n            \n            // Respostas de fallback\n            const fallbackResponses = {\n                'ol√°': 'Ol√°, Jo√£o Manoel! Como posso ajudar voc√™ hoje?',\n                'oi': 'Oi, Sr. Jo√£o Manoel! Em que posso ser √∫til?',\n                'como voc√™ est√°': 'Estou funcionando perfeitamente, Jo√£o Manoel!',\n                'que horas s√£o': `S√£o ${new Date().toLocaleTimeString()}, Sr. Jo√£o Manoel.`,\n                'que dia √© hoje': `Hoje √© ${new Date().toLocaleDateString()}, Jo√£o Manoel.`,\n                'obrigado': 'De nada, Jo√£o Manoel! Sempre √† disposi√ß√£o.',\n                'ajuda': 'Posso ajudar com conversa√ß√£o, informa√ß√µes e muito mais, Jo√£o Manoel!'\n            };\n\n            const lowerMessage = message.toLowerCase();\n            let response = null;\n\n            for (const [key, value] of Object.entries(fallbackResponses)) {\n                if (lowerMessage.includes(key)) {\n                    response = value;\n                    break;\n                }\n            }\n\n            if (!response) {\n                response = `Desculpe, Jo√£o Manoel. A API est√° temporariamente indispon√≠vel. Tente: \"ol√°\", \"que horas s√£o\" ou \"ajuda\".`;\n            }\n\n            displayMessage(response, false);\n        }\n    }\n\n    // Fun√ß√£o para processar comandos\n    function PlayAssistant(message) {\n        if (message && message.trim() !== \"\") {\n            console.log('üé§ Comando recebido:', message);\n            \n            // Mostrar interface de conversa√ß√£o\n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            \n            // Exibir mensagem do usu√°rio\n            displayMessage(message, true);\n            \n            // Processar comando\n            if (isGitHubPages) {\n                // Modo GitHub Pages - usar API REST\n                callAPI(message);\n            } else {\n                // Modo local - usar Eel\n                if (typeof eel !== 'undefined' && eel.allCommands) {\n                    eel.allCommands(message);\n                } else {\n                    callAPI(message); // Fallback para API\n                }\n            }\n            \n            // Limpar input\n            $(\"#chatbox\").val(\"\");\n            $(\"#MicBtn\").attr('hidden', false);\n            $(\"#SendBtn\").attr('hidden', true);\n        }\n    }\n\n    // Mic button click event\n    $(\"#MicBtn\").click(function () {\n        if (isGitHubPages) {\n            // No GitHub Pages, mostrar mensagem sobre limita√ß√µes\n            alert('üé§ Reconhecimento de voz n√£o dispon√≠vel no navegador.\\n\\nüí° Use a caixa de texto para conversar com o Jarvis!\\n\\nüì± Para funcionalidades completas, execute localmente.');\n            $(\"#chatbox\").focus();\n        } else {\n            // Modo local\n            if (typeof eel !== 'undefined' && eel.playAssistantSound) {\n                eel.playAssistantSound();\n            }\n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            if (typeof eel !== 'undefined' && eel.allCommands) {\n                eel.allCommands()();\n            }\n        }\n    });\n\n    // Keyboard shortcut (Cmd/Ctrl + J)\n    function doc_keyUp(e) {\n        if (e.key === 'j' && (e.metaKey || e.ctrlKey)) {\n            $(\"#MicBtn\").click();\n        }\n    }\n    document.addEventListener('keyup', doc_keyUp, false);\n\n    // Toggle function to hide and display mic and send button\n    function ShowHideButton(message) {\n        if (message.length == 0) {\n            $(\"#MicBtn\").attr('hidden', false);\n            $(\"#SendBtn\").attr('hidden', true);\n        } else {\n            $(\"#MicBtn\").attr('hidden', true);\n            $(\"#SendBtn\").attr('hidden', false);\n        }\n    }\n\n    // Key up event handler on text box\n    $(\"#chatbox\").keyup(function () {\n        let message = $(\"#chatbox\").val();\n        ShowHideButton(message);\n    });\n\n    // Send button event handler\n    $(\"#SendBtn\").click(function () {\n        let message = $(\"#chatbox\").val();\n        PlayAssistant(message);\n    });\n\n    // Settings button\n    $(\"#SettingsBtn\").click(function () {\n        const settingsInfo = `\nü§ñ JARVIS - Configura√ß√µes\n\nüìç Modo: ${isGitHubPages ? 'GitHub Pages (Online)' : 'Local'}\nüîó API: ${API_URL}\nüåê URL: ${window.location.href}\n\n${isGitHubPages ? \n    'üí° Para funcionalidades completas (reconhecimento de voz, controle de aplicativos), execute localmente.' : \n    '‚úÖ Modo local ativo - todas as funcionalidades dispon√≠veis.'}\n\nüìö Documenta√ß√£o completa no GitHub.\n        `;\n        alert(settingsInfo);\n    });\n\n    // Enter press event handler on chat box\n    $(\"#chatbox\").keypress(function (e) {\n        if (e.which == 13) {\n            let message = $(\"#chatbox\").val();\n            PlayAssistant(message);\n        }\n    });\n\n    // Inicializa√ß√£o espec√≠fica para GitHub Pages\n    if (isGitHubPages) {\n        // Atualizar mensagem de boas-vindas\n        setTimeout(() => {\n            displayMessage('Ol√°, Jo√£o Manoel! Bem-vindo ao Jarvis online! Digite uma mensagem para come√ßar.', false);\n        }, 2000);\n\n        // Adicionar estilos para mensagens\n        const style = document.createElement('style');\n        style.textContent = `\n            .message {\n                margin: 10px 0;\n                padding: 10px;\n                border-radius: 10px;\n                max-width: 80%;\n            }\n            .user-message {\n                background: #007bff;\n                color: white;\n                margin-left: auto;\n                text-align: right;\n            }\n            .jarvis-message {\n                background: #00aaff;\n                color: white;\n                margin-right: auto;\n            }\n            .message-content {\n                margin-bottom: 5px;\n            }\n            .message-time {\n                font-size: 0.8em;\n                opacity: 0.7;\n            }\n        `;\n        document.head.appendChild(style);\n\n        // Testar conectividade com a API\n        fetch(`${API_URL}/health`)\n            .then(response => response.json())\n            .then(data => {\n                console.log('‚úÖ API conectada:', data);\n                displayMessage(`API conectada! Provedor: ${data.api_provider || 'desconhecido'}`, false);\n            })\n            .catch(error => {\n                console.warn('‚ö†Ô∏è API n√£o dispon√≠vel:', error);\n                displayMessage('‚ö†Ô∏è API temporariamente indispon√≠vel. Usando respostas b√°sicas.', false);\n            });\n    }\n\n    // Fun√ß√µes expostas para compatibilidade com Eel\n    window.eel = window.eel || {};\n    window.eel.exposed_functions = window.eel.exposed_functions || {};\n    \n    window.eel.exposed_functions.receiverText = function(message) {\n        displayMessage(message, false);\n    };\n    \n    window.eel.exposed_functions.DisplayMessage = function(message) {\n        displayMessage(message, false);\n    };\n    \n    window.eel.exposed_functions.ShowHood = function() {\n        $(\"#SiriWave\").attr(\"hidden\", true);\n        $(\"#Oval\").attr(\"hidden\", false);\n    };\n\n    console.log('üöÄ Jarvis inicializado com sucesso!');\n});"

// Registrar Service Worker para PWA
if ("serviceWorker" in navigator && window.location.hostname.includes("github.io")) {
    window.addEventListener("load", function() {
        navigator.serviceWorker.register("/jarvis/sw.js")
            .then(function(registration) {
                console.log("‚úÖ Service Worker registrado:", registration.scope);
            })
            .catch(function(error) {
                console.log("‚ùå Falha ao registrar Service Worker:", error);
            });
    });
}
