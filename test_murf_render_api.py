#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nTeste da Integra√ß√£o Murf AI TTS - API Render\nScript para testar o endpoint TTS da API do Jarvis\n\"\"\"\n\nimport requests\nimport json\nimport time\nimport os\nfrom typing import Dict, Any\n\n# Configura√ß√µes\nAPI_BASE_URL = \"https://jarvis-api.onrender.com\"  # Substitua pela sua URL do Render\nLOCAL_API_URL = \"http://localhost:8000\"  # Para testes locais\n\n# Usar API local se dispon√≠vel, sen√£o usar Render\nUSE_LOCAL = False  # Mude para True para testar localmente\nAPI_URL = LOCAL_API_URL if USE_LOCAL else API_BASE_URL\n\nclass MurfTTSAPITester:\n    def __init__(self, base_url: str):\n        self.base_url = base_url.rstrip('/')\n        self.session = requests.Session()\n        \n    def test_health(self) -> Dict[str, Any]:\n        \"\"\"Testa o endpoint de health\"\"\"\n        print(\"üîç Testando health check...\")\n        \n        try:\n            response = self.session.get(f\"{self.base_url}/health\", timeout=10)\n            \n            if response.status_code == 200:\n                data = response.json()\n                print(f\"‚úÖ Health check OK: {data}\")\n                return data\n            else:\n                print(f\"‚ùå Health check falhou: {response.status_code}\")\n                return {\"error\": f\"HTTP {response.status_code}\"}\n                \n        except Exception as e:\n            print(f\"‚ùå Erro no health check: {e}\")\n            return {\"error\": str(e)}\n    \n    def test_root_endpoint(self) -> Dict[str, Any]:\n        \"\"\"Testa o endpoint raiz\"\"\"\n        print(\"üîç Testando endpoint raiz...\")\n        \n        try:\n            response = self.session.get(f\"{self.base_url}/\", timeout=10)\n            \n            if response.status_code == 200:\n                data = response.json()\n                print(f\"‚úÖ Endpoint raiz OK: {data}\")\n                return data\n            else:\n                print(f\"‚ùå Endpoint raiz falhou: {response.status_code}\")\n                return {\"error\": f\"HTTP {response.status_code}\"}\n                \n        except Exception as e:\n            print(f\"‚ùå Erro no endpoint raiz: {e}\")\n            return {\"error\": str(e)}\n    \n    def test_tts_basic(self) -> bool:\n        \"\"\"Teste b√°sico do TTS\"\"\"\n        print(\"üéµ Testando TTS b√°sico...\")\n        \n        payload = {\n            \"text\": \"Ol√°! Este √© um teste do Murf AI TTS integrado √† API do Jarvis.\"\n        }\n        \n        try:\n            response = self.session.post(\n                f\"{self.base_url}/tts\",\n                json=payload,\n                timeout=60\n            )\n            \n            if response.status_code == 200:\n                # Salvar √°udio\n                filename = \"teste_tts_basico.mp3\"\n                with open(filename, \"wb\") as f:\n                    f.write(response.content)\n                \n                file_size = len(response.content)\n                print(f\"‚úÖ TTS b√°sico OK: {file_size} bytes salvos em {filename}\")\n                return True\n            else:\n                print(f\"‚ùå TTS b√°sico falhou: {response.status_code}\")\n                print(f\"Resposta: {response.text}\")\n                return False\n                \n        except Exception as e:\n            print(f\"‚ùå Erro no TTS b√°sico: {e}\")\n            return False\n    \n    def test_tts_advanced(self) -> bool:\n        \"\"\"Teste avan√ßado do TTS com par√¢metros personalizados\"\"\"\n        print(\"üé§ Testando TTS avan√ßado...\")\n        \n        test_cases = [\n            {\n                \"name\": \"Voz Feminina Natural\",\n                \"payload\": {\n                    \"text\": \"Ol√°, eu sou a Camila, uma voz feminina natural do Murf AI.\",\n                    \"voice_id\": \"pt-BR-female-1\",\n                    \"speed\": 1.0,\n                    \"pitch\": 1.0,\n                    \"volume\": 0.8\n                },\n                \"filename\": \"teste_camila.mp3\"\n            },\n            {\n                \"name\": \"Voz Masculina R√°pida\",\n                \"payload\": {\n                    \"text\": \"Eu sou o Carlos, falando mais rapidamente para demonstrar controle de velocidade.\",\n                    \"voice_id\": \"pt-BR-male-1\",\n                    \"speed\": 1.3,\n                    \"pitch\": 0.9,\n                    \"volume\": 0.7\n                },\n                \"filename\": \"teste_carlos_rapido.mp3\"\n            },\n            {\n                \"name\": \"Voz Profissional Grave\",\n                \"payload\": {\n                    \"text\": \"Esta √© a Beatriz, com tom mais grave e velocidade reduzida para apresenta√ß√µes profissionais.\",\n                    \"voice_id\": \"pt-BR-female-2\",\n                    \"speed\": 0.9,\n                    \"pitch\": 0.8,\n                    \"volume\": 0.9\n                },\n                \"filename\": \"teste_beatriz_grave.mp3\"\n            }\n        ]\n        \n        success_count = 0\n        \n        for test_case in test_cases:\n            print(f\"  üß™ Testando: {test_case['name']}\")\n            \n            try:\n                response = self.session.post(\n                    f\"{self.base_url}/tts\",\n                    json=test_case[\"payload\"],\n                    timeout=60\n                )\n                \n                if response.status_code == 200:\n                    # Salvar √°udio\n                    with open(test_case[\"filename\"], \"wb\") as f:\n                        f.write(response.content)\n                    \n                    file_size = len(response.content)\n                    print(f\"    ‚úÖ {test_case['name']}: {file_size} bytes\")\n                    success_count += 1\n                else:\n                    print(f\"    ‚ùå {test_case['name']}: HTTP {response.status_code}\")\n                    print(f\"    Resposta: {response.text}\")\n                    \n            except Exception as e:\n                print(f\"    ‚ùå {test_case['name']}: {e}\")\n            \n            # Pausa entre testes\n            time.sleep(1)\n        \n        print(f\"üéØ TTS avan√ßado: {success_count}/{len(test_cases)} testes passaram\")\n        return success_count == len(test_cases)\n    \n    def test_tts_error_cases(self) -> bool:\n        \"\"\"Testa casos de erro do TTS\"\"\"\n        print(\"‚ö†Ô∏è Testando casos de erro...\")\n        \n        error_cases = [\n            {\n                \"name\": \"Texto vazio\",\n                \"payload\": {\"text\": \"\"},\n                \"expected_status\": 400\n            },\n            {\n                \"name\": \"Texto s√≥ espa√ßos\",\n                \"payload\": {\"text\": \"   \"},\n                \"expected_status\": 400\n            },\n            {\n                \"name\": \"Velocidade inv√°lida\",\n                \"payload\": {\n                    \"text\": \"Teste\",\n                    \"speed\": 10.0  # Muito alto\n                },\n                \"expected_status\": [400, 500]  # Pode ser 400 ou 500 dependendo da valida√ß√£o\n            }\n        ]\n        \n        success_count = 0\n        \n        for test_case in error_cases:\n            print(f\"  üß™ Testando: {test_case['name']}\")\n            \n            try:\n                response = self.session.post(\n                    f\"{self.base_url}/tts\",\n                    json=test_case[\"payload\"],\n                    timeout=30\n                )\n                \n                expected = test_case[\"expected_status\"]\n                if isinstance(expected, list):\n                    success = response.status_code in expected\n                else:\n                    success = response.status_code == expected\n                \n                if success:\n                    print(f\"    ‚úÖ {test_case['name']}: HTTP {response.status_code} (esperado)\")\n                    success_count += 1\n                else:\n                    print(f\"    ‚ùå {test_case['name']}: HTTP {response.status_code} (esperado {expected})\")\n                    \n            except Exception as e:\n                print(f\"    ‚ùå {test_case['name']}: {e}\")\n        \n        print(f\"üéØ Casos de erro: {success_count}/{len(error_cases)} testes passaram\")\n        return success_count == len(error_cases)\n    \n    def run_all_tests(self) -> Dict[str, bool]:\n        \"\"\"Executa todos os testes\"\"\"\n        print(f\"üöÄ Iniciando testes da API Murf TTS: {self.base_url}\")\n        print(\"=\" * 60)\n        \n        results = {}\n        \n        # 1. Health check\n        health_data = self.test_health()\n        results[\"health\"] = \"error\" not in health_data\n        \n        if results[\"health\"]:\n            murf_configured = health_data.get(\"murf_tts_configured\", False)\n            if not murf_configured:\n                print(\"‚ö†Ô∏è AVISO: Murf TTS n√£o est√° configurado na API!\")\n                print(\"Configure MURF_API_KEY no Render Dashboard.\")\n        \n        print()\n        \n        # 2. Root endpoint\n        root_data = self.test_root_endpoint()\n        results[\"root\"] = \"error\" not in root_data\n        print()\n        \n        # 3. TTS b√°sico\n        results[\"tts_basic\"] = self.test_tts_basic()\n        print()\n        \n        # 4. TTS avan√ßado\n        results[\"tts_advanced\"] = self.test_tts_advanced()\n        print()\n        \n        # 5. Casos de erro\n        results[\"tts_errors\"] = self.test_tts_error_cases()\n        print()\n        \n        # Resumo\n        print(\"=\" * 60)\n        print(\"üìä RESUMO DOS TESTES:\")\n        \n        total_tests = len(results)\n        passed_tests = sum(1 for result in results.values() if result)\n        \n        for test_name, passed in results.items():\n            status = \"‚úÖ PASSOU\" if passed else \"‚ùå FALHOU\"\n            print(f\"  {test_name}: {status}\")\n        \n        print(f\"\\nüéØ Total: {passed_tests}/{total_tests} testes passaram\")\n        \n        if passed_tests == total_tests:\n            print(\"üéâ TODOS OS TESTES PASSARAM! Integra√ß√£o Murf AI funcionando perfeitamente!\")\n        else:\n            print(\"‚ö†Ô∏è Alguns testes falharam. Verifique a configura√ß√£o da API.\")\n        \n        return results\n\ndef main():\n    \"\"\"Fun√ß√£o principal\"\"\"\n    print(\"üéµ Teste da Integra√ß√£o Murf AI TTS - API Render\")\n    print(f\"üì° URL da API: {API_URL}\")\n    print()\n    \n    # Verificar se deve usar API local\n    if USE_LOCAL:\n        print(\"‚ö†Ô∏è MODO LOCAL: Certifique-se de que a API est√° rodando localmente\")\n        print(\"Execute: cd api && uvicorn main:app --reload\")\n        print()\n    \n    # Criar tester e executar\n    tester = MurfTTSAPITester(API_URL)\n    results = tester.run_all_tests()\n    \n    # Instru√ß√µes finais\n    print(\"\\nüìù PR√ìXIMOS PASSOS:\")\n    \n    if not results.get(\"health\", False):\n        print(\"1. ‚ùå Verifique se a API est√° online e acess√≠vel\")\n        print(f\"2. üåê Teste manualmente: {API_URL}/health\")\n    \n    elif not results.get(\"tts_basic\", False):\n        print(\"1. ‚öôÔ∏è Configure MURF_API_KEY no Render Dashboard\")\n        print(\"2. üîë Use a chave: ap2_294c1017-4d7d-48c5-be76-a497b886d21a\")\n        print(\"3. üîÑ Aguarde o redeploy autom√°tico\")\n    \n    else:\n        print(\"1. ‚úÖ Integra√ß√£o funcionando!\")\n        print(\"2. üéµ Arquivos de √°udio gerados para teste\")\n        print(\"3. üîó Integre com o frontend usando o endpoint /tts\")\n        print(\"4. üìö Consulte MURF_AI_RENDER_INTEGRATION.md para mais detalhes\")\n    \n    print(\"\\nüéâ Teste conclu√≠do!\")\n\nif __name__ == \"__main__\":\n    main()\n"