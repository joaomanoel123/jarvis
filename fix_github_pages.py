#!/usr/bin/env python3\n\"\"\"\nüîß CORRE√á√ÉO DO GITHUB PAGES - JARVIS\nScript para corrigir problemas de configura√ß√£o do GitHub Pages\n\"\"\"\n\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\n\ndef print_header(title):\n    print(f\"\\n{'='*60}\")\n    print(f\"üîß {title}\")\n    print(f\"{'='*60}\")\n\ndef print_section(title):\n    print(f\"\\nüìã {title}\")\n    print(\"-\" * 40)\n\ndef check_github_pages_config():\n    \"\"\"Verifica a configura√ß√£o do GitHub Pages\"\"\"\n    print_section(\"VERIFICANDO CONFIGURA√á√ÉO DO GITHUB PAGES\")\n    \n    # Verificar se estamos no diret√≥rio correto\n    if not os.path.exists(\"docs\") or not os.path.exists(\".git\"):\n        print(\"‚ùå ERRO: Execute este script no diret√≥rio raiz do projeto Jarvis\")\n        return False\n    \n    # Verificar se docs/index.html existe\n    if os.path.exists(\"docs/index.html\"):\n        print(\"‚úÖ docs/index.html encontrado\")\n    else:\n        print(\"‚ùå docs/index.html n√£o encontrado\")\n        return False\n    \n    # Verificar .nojekyll\n    if os.path.exists(\"docs/.nojekyll\"):\n        print(\"‚úÖ docs/.nojekyll encontrado\")\n    else:\n        print(\"‚ö†Ô∏è docs/.nojekyll n√£o encontrado - criando...\")\n        with open(\"docs/.nojekyll\", \"w\") as f:\n            f.write(\"\")\n        print(\"‚úÖ docs/.nojekyll criado\")\n    \n    return True\n\ndef fix_index_html():\n    \"\"\"Corrige problemas no index.html\"\"\"\n    print_section(\"VERIFICANDO E CORRIGINDO INDEX.HTML\")\n    \n    try:\n        with open(\"docs/index.html\", \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n        \n        # Verificar se h√° caracteres de escape mal formados\n        if \"\\\\n\" in content:\n            print(\"‚ö†Ô∏è Caracteres de escape mal formados detectados - corrigindo...\")\n            # Corrigir caracteres de escape\n            content = content.replace(\"\\\\n\", \"\\n\")\n            content = content.replace(\"\\\\t\", \"\\t\")\n            content = content.replace(\"\\\\r\", \"\\r\")\n            content = content.replace('\\\\\"', '\"')\n            \n            # Salvar arquivo corrigido\n            with open(\"docs/index.html\", \"w\", encoding=\"utf-8\") as f:\n                f.write(content)\n            print(\"‚úÖ Caracteres de escape corrigidos\")\n        else:\n            print(\"‚úÖ index.html est√° correto\")\n        \n        # Verificar tamanho do arquivo\n        size = os.path.getsize(\"docs/index.html\")\n        print(f\"üìä Tamanho do index.html: {size} bytes\")\n        \n        if size < 1000:\n            print(\"‚ö†Ô∏è Arquivo muito pequeno - pode estar corrompido\")\n            return False\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Erro ao verificar index.html: {e}\")\n        return False\n\ndef commit_and_push_changes():\n    \"\"\"Commita e faz push das mudan√ßas\"\"\"\n    print_section(\"COMMITANDO E FAZENDO PUSH DAS MUDAN√áAS\")\n    \n    try:\n        # Verificar status do git\n        result = subprocess.run(['git', 'status', '--porcelain'], \n                              capture_output=True, text=True)\n        \n        if result.stdout.strip():\n            print(\"üìù Mudan√ßas detectadas - commitando...\")\n            \n            # Adicionar mudan√ßas\n            subprocess.run(['git', 'add', 'docs/'], check=True)\n            subprocess.run(['git', 'add', '.nojekyll'], check=True, stderr=subprocess.DEVNULL)\n            \n            # Commit\n            commit_msg = \"üîß Fix GitHub Pages configuration and index.html\"\n            subprocess.run(['git', 'commit', '-m', commit_msg], check=True)\n            print(\"‚úÖ Mudan√ßas commitadas\")\n            \n            # Push\n            print(\"üì§ Fazendo push para GitHub...\")\n            subprocess.run(['git', 'push', 'origin', 'main'], check=True)\n            print(\"‚úÖ Push realizado com sucesso\")\n            \n        else:\n            print(\"‚ÑπÔ∏è Nenhuma mudan√ßa para commitar\")\n        \n        return True\n        \n    except subprocess.CalledProcessError as e:\n        print(f\"‚ùå Erro no Git: {e}\")\n        return False\n    except Exception as e:\n        print(f\"‚ùå Erro inesperado: {e}\")\n        return False\n\ndef create_github_pages_test():\n    \"\"\"Cria uma p√°gina de teste simples\"\"\"\n    print_section(\"CRIANDO P√ÅGINA DE TESTE\")\n    \n    test_content = \"\"\"\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>üß™ Teste GitHub Pages - Jarvis</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background: linear-gradient(135deg, #1e3c72, #2a5298);\n            color: white;\n            margin: 0;\n            padding: 20px;\n            text-align: center;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: rgba(0, 0, 0, 0.3);\n            padding: 40px;\n            border-radius: 15px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            max-width: 600px;\n        }\n        h1 {\n            color: #00AAFF;\n            margin-bottom: 20px;\n        }\n        .status {\n            font-size: 18px;\n            margin: 10px 0;\n        }\n        .success { color: #4CAF50; }\n        .info { color: #2196F3; }\n        button {\n            background: #00AAFF;\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n            margin: 10px;\n        }\n        button:hover {\n            background: #0088CC;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>üß™ GitHub Pages - Teste de Funcionamento</h1>\n        \n        <div class=\"status success\">‚úÖ GitHub Pages est√° funcionando!</div>\n        <div class=\"status info\">üìÖ Teste realizado em: <span id=\"datetime\"></span></div>\n        \n        <p>Se voc√™ est√° vendo esta p√°gina, significa que o GitHub Pages est√° configurado corretamente.</p>\n        \n        <button onclick=\"window.location.href='index.html'\">üè† Ir para o Jarvis</button>\n        <button onclick=\"window.location.href='teste_rapido.html'\">üîç Teste R√°pido</button>\n        \n        <div style=\"margin-top: 30px; font-size: 14px; opacity: 0.8;\">\n            <p>üîó URLs importantes:</p>\n            <p>‚Ä¢ Jarvis: <a href=\"index.html\" style=\"color: #00AAFF;\">index.html</a></p>\n            <p>‚Ä¢ Teste: <a href=\"teste_rapido.html\" style=\"color: #00AAFF;\">teste_rapido.html</a></p>\n            <p>‚Ä¢ API: <a href=\"https://jarvis-tdgt.onrender.com/health\" target=\"_blank\" style=\"color: #00AAFF;\">API Health</a></p>\n        </div>\n    </div>\n    \n    <script>\n        document.getElementById('datetime').textContent = new Date().toLocaleString('pt-BR');\n        \n        // Teste autom√°tico ap√≥s 3 segundos\n        setTimeout(() => {\n            if (confirm('ü§ñ Deseja ir automaticamente para o Jarvis?')) {\n                window.location.href = 'index.html';\n            }\n        }, 3000);\n    </script>\n</body>\n</html>\n    \"\"\"\n    \n    try:\n        with open(\"docs/test-github-pages.html\", \"w\", encoding=\"utf-8\") as f:\n            f.write(test_content)\n        print(\"‚úÖ P√°gina de teste criada: docs/test-github-pages.html\")\n        return True\n    except Exception as e:\n        print(f\"‚ùå Erro ao criar p√°gina de teste: {e}\")\n        return False\n\ndef show_github_pages_info():\n    \"\"\"Mostra informa√ß√µes sobre GitHub Pages\"\"\"\n    print_section(\"INFORMA√á√ïES DO GITHUB PAGES\")\n    \n    info = \"\"\"\nüåê URLS DO SEU JARVIS:\n\nüì± P√°gina Principal:\n   https://joaomanoel123.github.io/jarvis\n   \nüß™ P√°gina de Teste:\n   https://joaomanoel123.github.io/jarvis/test-github-pages.html\n   \nüîç Teste R√°pido:\n   https://joaomanoel123.github.io/jarvis/teste_rapido.html\n\n‚è±Ô∏è TEMPO DE DEPLOY:\n‚Ä¢ Mudan√ßas podem levar at√© 10 minutos para aparecer\n‚Ä¢ Primeiro deploy pode demorar mais\n‚Ä¢ Use Ctrl+F5 para for√ßar atualiza√ß√£o\n\nüîß CONFIGURA√á√ïES VERIFICADAS:\n‚Ä¢ ‚úÖ Diret√≥rio: docs/\n‚Ä¢ ‚úÖ Arquivo: index.html\n‚Ä¢ ‚úÖ Jekyll: Desabilitado (.nojekyll)\n‚Ä¢ ‚úÖ Branch: main\n\nüí° DICAS:\n‚Ä¢ Se ainda mostrar README, aguarde 10 minutos\n‚Ä¢ Teste em modo inc√≥gnito\n‚Ä¢ Verifique se o commit foi feito\n‚Ä¢ Use a p√°gina de teste para verificar\n    \"\"\"\n    \n    print(info)\n\ndef main():\n    \"\"\"Fun√ß√£o principal\"\"\"\n    print_header(\"CORRE√á√ÉO DO GITHUB PAGES - JARVIS\")\n    print(\"Este script ir√° corrigir problemas de configura√ß√£o do GitHub Pages\")\n    \n    # Verificar configura√ß√£o\n    if not check_github_pages_config():\n        print(\"\\n‚ùå Falha na verifica√ß√£o da configura√ß√£o\")\n        sys.exit(1)\n    \n    # Corrigir index.html\n    if not fix_index_html():\n        print(\"\\n‚ùå Falha na corre√ß√£o do index.html\")\n        sys.exit(1)\n    \n    # Criar p√°gina de teste\n    create_github_pages_test()\n    \n    # Commitar e fazer push\n    if commit_and_push_changes():\n        print(\"\\n‚úÖ Corre√ß√µes aplicadas com sucesso!\")\n    else:\n        print(\"\\n‚ö†Ô∏è Corre√ß√µes aplicadas, mas houve problemas no Git\")\n    \n    # Mostrar informa√ß√µes\n    show_github_pages_info()\n    \n    print_header(\"CORRE√á√ÉO CONCLU√çDA\")\n    print(\"üöÄ Aguarde at√© 10 minutos e teste as URLs acima!\")\n    print(\"üí° Se ainda houver problemas, use a p√°gina de teste primeiro.\")\n\nif __name__ == \"__main__\":\n    main()\n