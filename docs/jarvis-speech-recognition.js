/**\n * Jarvis Speech Recognition Module\n * Sistema de reconhecimento de voz otimizado para o Jarvis\n * Compat√≠vel com GitHub Pages e dispositivos m√≥veis\n */\n\nclass JarvisSpeechRecognition {\n    constructor() {\n        this.recognition = null;\n        this.isListening = false;\n        this.isSupported = this.checkSupport();\n        this.settings = {\n            language: 'pt-BR',\n            continuous: false,\n            interimResults: true,\n            maxAlternatives: 3,\n            timeout: 10000, // 10 segundos\n            noiseThreshold: 0.1,\n            autoRestart: true\n        };\n        \n        this.callbacks = {\n            onResult: null,\n            onError: null,\n            onStart: null,\n            onEnd: null,\n            onInterim: null\n        };\n        \n        this.init();\n    }\n\n    checkSupport() {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        const isSupported = !!SpeechRecognition;\n        \n        console.log('üé§ Suporte a Speech Recognition:', isSupported ? '‚úÖ Dispon√≠vel' : '‚ùå N√£o dispon√≠vel');\n        \n        if (!isSupported) {\n            console.warn('‚ö†Ô∏è Web Speech API n√£o suportada neste navegador');\n            console.log('üì± Navegadores suportados: Chrome, Edge, Safari (parcial)');\n        }\n        \n        return isSupported;\n    }\n\n    init() {\n        if (!this.isSupported) {\n            console.warn('‚ùå Speech Recognition n√£o pode ser inicializado');\n            return;\n        }\n\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        this.recognition = new SpeechRecognition();\n        \n        // Configura√ß√µes otimizadas\n        this.recognition.lang = this.settings.language;\n        this.recognition.continuous = this.settings.continuous;\n        this.recognition.interimResults = this.settings.interimResults;\n        this.recognition.maxAlternatives = this.settings.maxAlternatives;\n        \n        // Event listeners\n        this.setupEventListeners();\n        \n        console.log('üé§ Jarvis Speech Recognition inicializado');\n        console.log('üåç Idioma configurado:', this.settings.language);\n    }\n\n    setupEventListeners() {\n        if (!this.recognition) return;\n\n        // In√≠cio do reconhecimento\n        this.recognition.onstart = () => {\n            this.isListening = true;\n            console.log('üé§ Reconhecimento de voz iniciado');\n            \n            if (this.callbacks.onStart) {\n                this.callbacks.onStart();\n            }\n            \n            // Timeout de seguran√ßa\n            this.startTimeout();\n        };\n\n        // Resultado do reconhecimento\n        this.recognition.onresult = (event) => {\n            console.log('üìù Resultado recebido:', event);\n            \n            let finalTranscript = '';\n            let interimTranscript = '';\n            \n            // Processar todos os resultados\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n                const result = event.results[i];\n                const transcript = result[0].transcript;\n                \n                if (result.isFinal) {\n                    finalTranscript += transcript;\n                    console.log('‚úÖ Transcri√ß√£o final:', transcript);\n                    console.log('üéØ Confian√ßa:', (result[0].confidence * 100).toFixed(1) + '%');\n                } else {\n                    interimTranscript += transcript;\n                    console.log('‚è≥ Transcri√ß√£o parcial:', transcript);\n                    \n                    if (this.callbacks.onInterim) {\n                        this.callbacks.onInterim(transcript);\n                    }\n                }\n            }\n            \n            // Callback para resultado final\n            if (finalTranscript && this.callbacks.onResult) {\n                this.callbacks.onResult(finalTranscript.trim(), event.results[event.resultIndex][0].confidence);\n            }\n        };\n\n        // Fim do reconhecimento\n        this.recognition.onend = () => {\n            this.isListening = false;\n            console.log('üõë Reconhecimento de voz finalizado');\n            \n            this.clearTimeout();\n            \n            if (this.callbacks.onEnd) {\n                this.callbacks.onEnd();\n            }\n        };\n\n        // Erros\n        this.recognition.onerror = (event) => {\n            console.error('‚ùå Erro no reconhecimento de voz:', event.error);\n            \n            let errorMessage = 'Erro desconhecido';\n            \n            switch (event.error) {\n                case 'no-speech':\n                    errorMessage = 'Nenhuma fala detectada. Tente falar mais alto ou verificar o microfone.';\n                    break;\n                case 'audio-capture':\n                    errorMessage = 'Erro na capta√ß√£o de √°udio. Verifique se o microfone est√° conectado e permitido.';\n                    break;\n                case 'not-allowed':\n                    errorMessage = 'Permiss√£o de microfone negada. Clique no √≠cone de microfone na barra de endere√ßos para permitir.';\n                    break;\n                case 'network':\n                    errorMessage = 'Erro de rede. Verifique sua conex√£o com a internet.';\n                    break;\n                case 'service-not-allowed':\n                    errorMessage = 'Servi√ßo de reconhecimento n√£o permitido. Tente novamente.';\n                    break;\n                case 'bad-grammar':\n                    errorMessage = 'Erro na gram√°tica de reconhecimento.';\n                    break;\n                case 'language-not-supported':\n                    errorMessage = 'Idioma n√£o suportado. Tentando portugu√™s brasileiro...';\n                    this.settings.language = 'pt-BR';\n                    break;\n            }\n            \n            console.log('üí° Sugest√£o:', errorMessage);\n            \n            if (this.callbacks.onError) {\n                this.callbacks.onError(event.error, errorMessage);\n            }\n            \n            this.isListening = false;\n            this.clearTimeout();\n        };\n\n        // Sem correspond√™ncia\n        this.recognition.onnomatch = () => {\n            console.warn('‚ö†Ô∏è Nenhuma correspond√™ncia encontrada');\n            \n            if (this.callbacks.onError) {\n                this.callbacks.onError('no-match', 'N√£o foi poss√≠vel entender o que foi dito. Tente falar mais claramente.');\n            }\n        };\n    }\n\n    startTimeout() {\n        this.clearTimeout();\n        \n        this.timeoutId = setTimeout(() => {\n            console.log('‚è∞ Timeout do reconhecimento de voz');\n            this.stop();\n            \n            if (this.callbacks.onError) {\n                this.callbacks.onError('timeout', 'Tempo limite excedido. Tente novamente.');\n            }\n        }, this.settings.timeout);\n    }\n\n    clearTimeout() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n\n    start() {\n        if (!this.isSupported) {\n            console.error('‚ùå Speech Recognition n√£o suportado');\n            if (this.callbacks.onError) {\n                this.callbacks.onError('not-supported', 'Reconhecimento de voz n√£o suportado neste navegador.');\n            }\n            return false;\n        }\n\n        if (this.isListening) {\n            console.warn('‚ö†Ô∏è Reconhecimento j√° est√° ativo');\n            return false;\n        }\n\n        try {\n            console.log('üöÄ Iniciando reconhecimento de voz...');\n            console.log('üåç Idioma:', this.settings.language);\n            \n            // Atualizar configura√ß√µes\n            this.recognition.lang = this.settings.language;\n            this.recognition.continuous = this.settings.continuous;\n            this.recognition.interimResults = this.settings.interimResults;\n            \n            this.recognition.start();\n            return true;\n        } catch (error) {\n            console.error('‚ùå Erro ao iniciar reconhecimento:', error);\n            \n            if (this.callbacks.onError) {\n                this.callbacks.onError('start-error', 'Erro ao iniciar reconhecimento de voz: ' + error.message);\n            }\n            \n            return false;\n        }\n    }\n\n    stop() {\n        if (!this.recognition || !this.isListening) {\n            return;\n        }\n\n        try {\n            console.log('üõë Parando reconhecimento de voz...');\n            this.recognition.stop();\n            this.clearTimeout();\n        } catch (error) {\n            console.error('‚ùå Erro ao parar reconhecimento:', error);\n        }\n    }\n\n    abort() {\n        if (!this.recognition) {\n            return;\n        }\n\n        try {\n            console.log('üö´ Abortando reconhecimento de voz...');\n            this.recognition.abort();\n            this.isListening = false;\n            this.clearTimeout();\n        } catch (error) {\n            console.error('‚ùå Erro ao abortar reconhecimento:', error);\n        }\n    }\n\n    // Configurar callbacks\n    onResult(callback) {\n        this.callbacks.onResult = callback;\n    }\n\n    onError(callback) {\n        this.callbacks.onError = callback;\n    }\n\n    onStart(callback) {\n        this.callbacks.onStart = callback;\n    }\n\n    onEnd(callback) {\n        this.callbacks.onEnd = callback;\n    }\n\n    onInterim(callback) {\n        this.callbacks.onInterim = callback;\n    }\n\n    // Configura√ß√µes\n    setLanguage(language) {\n        this.settings.language = language;\n        console.log('üåç Idioma alterado para:', language);\n    }\n\n    setTimeout(timeout) {\n        this.settings.timeout = timeout;\n        console.log('‚è∞ Timeout alterado para:', timeout + 'ms');\n    }\n\n    setContinuous(continuous) {\n        this.settings.continuous = continuous;\n        console.log('üîÑ Modo cont√≠nuo:', continuous ? 'Ativado' : 'Desativado');\n    }\n\n    setInterimResults(interim) {\n        this.settings.interimResults = interim;\n        console.log('‚è≥ Resultados parciais:', interim ? 'Ativados' : 'Desativados');\n    }\n\n    // Utilit√°rios\n    isAvailable() {\n        return this.isSupported;\n    }\n\n    isActive() {\n        return this.isListening;\n    }\n\n    getSettings() {\n        return { ...this.settings };\n    }\n\n    // Teste de microfone\n    async testMicrophone() {\n        console.log('üé§ Testando acesso ao microfone...');\n        \n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            console.log('‚úÖ Microfone acess√≠vel');\n            \n            // Parar o stream\n            stream.getTracks().forEach(track => track.stop());\n            \n            return true;\n        } catch (error) {\n            console.error('‚ùå Erro ao acessar microfone:', error);\n            \n            let errorMessage = 'Erro desconhecido';\n            \n            switch (error.name) {\n                case 'NotAllowedError':\n                    errorMessage = 'Permiss√£o de microfone negada. Permita o acesso ao microfone.';\n                    break;\n                case 'NotFoundError':\n                    errorMessage = 'Microfone n√£o encontrado. Verifique se est√° conectado.';\n                    break;\n                case 'NotReadableError':\n                    errorMessage = 'Microfone em uso por outro aplicativo.';\n                    break;\n                case 'OverconstrainedError':\n                    errorMessage = 'Configura√ß√µes de √°udio n√£o suportadas.';\n                    break;\n                case 'SecurityError':\n                    errorMessage = 'Erro de seguran√ßa. Use HTTPS.';\n                    break;\n            }\n            \n            console.log('üí° Sugest√£o:', errorMessage);\n            return false;\n        }\n    }\n\n    // Diagn√≥stico completo\n    async diagnose() {\n        console.log('üîç Executando diagn√≥stico completo...');\n        \n        const diagnosis = {\n            speechRecognitionSupported: this.isSupported,\n            microphoneAccess: await this.testMicrophone(),\n            currentLanguage: this.settings.language,\n            isListening: this.isListening,\n            userAgent: navigator.userAgent,\n            isSecureContext: window.isSecureContext,\n            protocol: window.location.protocol\n        };\n        \n        console.log('üìä Diagn√≥stico:', diagnosis);\n        \n        // Recomenda√ß√µes\n        const recommendations = [];\n        \n        if (!diagnosis.speechRecognitionSupported) {\n            recommendations.push('Use Chrome, Edge ou Safari para melhor suporte');\n        }\n        \n        if (!diagnosis.microphoneAccess) {\n            recommendations.push('Permita acesso ao microfone nas configura√ß√µes do navegador');\n        }\n        \n        if (!diagnosis.isSecureContext) {\n            recommendations.push('Use HTTPS para melhor funcionamento');\n        }\n        \n        if (recommendations.length > 0) {\n            console.log('üí° Recomenda√ß√µes:');\n            recommendations.forEach((rec, i) => {\n                console.log(`   ${i + 1}. ${rec}`);\n            });\n        }\n        \n        return diagnosis;\n    }\n}\n\n// Inicializar quando o documento estiver pronto\nlet jarvisSpeechRecognition = null;\n\n$(document).ready(function() {\n    // Aguardar um pouco para garantir que tudo foi carregado\n    setTimeout(() => {\n        jarvisSpeechRecognition = new JarvisSpeechRecognition();\n        \n        // Tornar dispon√≠vel globalmente\n        window.jarvisSpeechRecognition = jarvisSpeechRecognition;\n        \n        console.log('üé§ Jarvis Speech Recognition integrado com sucesso!');\n    }, 1000);\n});\n\n// Exportar para uso em outros scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = JarvisSpeechRecognition;\n}"