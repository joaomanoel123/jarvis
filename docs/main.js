$(document).ready(function () {\n\n    eel.init()()\n    \n    // Otimiza√ß√µes para mobile\n    initializeMobileOptimizations();\n    \n    // Inicializar sequ√™ncia de loading\n    initializeJarvis();\n    \n    // Fun√ß√£o para parsing seguro de JSON\n    function safeJsonParse(response, context = 'API') {\n        const contentType = response.headers.get('content-type');\n        \n        if (contentType && contentType.includes('application/json')) {\n            return response.json();\n        } else {\n            // Se n√£o for JSON, retornar como texto e tentar fazer parse\n            return response.text().then(text => {\n                try {\n                    return JSON.parse(text);\n                } catch (e) {\n                    console.error(`‚ùå Resposta do ${context} n√£o √© JSON v√°lido:`, text.substring(0, 200));\n                    throw new Error(`Resposta do ${context} n√£o √© JSON v√°lido`);\n                }\n            });\n        }\n    }\n    \n    // Fun√ß√£o de otimiza√ß√µes para mobile\n    function initializeMobileOptimizations() {\n        console.log('üì± Inicializando otimiza√ß√µes mobile...');\n        \n        // Detectar dispositivo m√≥vel\n        const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n        const isSmallScreen = window.innerWidth <= 768;\n        \n        if (isMobile || isSmallScreen) {\n            console.log('üì± Dispositivo m√≥vel detectado');\n            \n            // Adicionar classe mobile ao body\n            $('body').addClass('mobile-device');\n            \n            // Prevenir zoom duplo toque\n            let lastTouchEnd = 0;\n            document.addEventListener('touchend', function (event) {\n                const now = (new Date()).getTime();\n                if (now - lastTouchEnd <= 300) {\n                    event.preventDefault();\n                }\n                lastTouchEnd = now;\n            }, false);\n            \n            // Melhorar performance em mobile\n            document.addEventListener('touchstart', function() {}, {passive: true});\n            document.addEventListener('touchmove', function() {}, {passive: true});\n            \n            // Otimizar SiriWave para mobile\n            if (typeof SiriWave !== 'undefined') {\n                // Reduzir complexidade da anima√ß√£o em mobile\n                const originalInitSiriWave = window.initSiriWave;\n                window.initSiriWave = function() {\n                    if (container && typeof SiriWave !== 'undefined') {\n                        try {\n                            sw = new SiriWave({\n                                container: container,\n                                width: Math.min(container.clientWidth || 320, 350),\n                                height: isSmallScreen ? 100 : 160,\n                                style: \"ios9\",\n                                amplitude: isSmallScreen ? 0.8 : 1,\n                                speed: isSmallScreen ? 0.25 : 0.30,\n                                autostart: true\n                            });\n                            console.log('üåä SiriWave otimizado para mobile');\n                        } catch (error) {\n                            console.warn('‚ö†Ô∏è Erro ao inicializar SiriWave mobile:', error);\n                        }\n                    }\n                };\n            }\n            \n            // Ajustar timeouts para mobile (conex√£o mais lenta)\n            if (window.PlayAssistant) {\n                const originalTimeout = 45000;\n                const mobileTimeout = 60000; // 60 segundos para mobile\n                console.log(`‚è±Ô∏è Timeout ajustado para mobile: ${mobileTimeout}ms`);\n            }\n            \n            // Otimizar anima√ß√µes para mobile\n            const style = document.createElement('style');\n            style.textContent = `\n                @media (max-width: 768px) {\n                    /* Reduzir anima√ß√µes complexas em mobile */\n                    .svg-frame {\n                        animation-duration: 3s !important;\n                    }\n                    \n                    svg {\n                        animation-duration: 6s !important;\n                    }\n                    \n                    /* Melhorar performance de scroll */\n                    * {\n                        -webkit-transform: translateZ(0);\n                        transform: translateZ(0);\n                    }\n                    \n                    /* Otimizar hover states para touch */\n                    .glow-on-hover:hover:before {\n                        opacity: 0 !important;\n                    }\n                    \n                    /* Melhor feedback t√°til */\n                    .glow-on-hover:active {\n                        transform: scale(0.95) !important;\n                        transition: transform 0.1s !important;\n                    }\n                }\n            `;\n            document.head.appendChild(style);\n            \n            // Adicionar suporte a gestos\n            addMobileGestures();\n            \n            console.log('‚úÖ Otimiza√ß√µes mobile aplicadas');\n        }\n    }\n    \n    // Fun√ß√£o para adicionar gestos mobile\n    function addMobileGestures() {\n        let touchStartY = 0;\n        let touchEndY = 0;\n        \n        // Gesto de swipe para abrir/fechar chat\n        document.addEventListener('touchstart', function(e) {\n            touchStartY = e.changedTouches[0].screenY;\n        }, {passive: true});\n        \n        document.addEventListener('touchend', function(e) {\n            touchEndY = e.changedTouches[0].screenY;\n            handleSwipeGesture();\n        }, {passive: true});\n        \n        function handleSwipeGesture() {\n            const swipeThreshold = 100;\n            const swipeDistance = touchStartY - touchEndY;\n            \n            // Swipe up para abrir chat (apenas se estiver na tela principal)\n            if (swipeDistance > swipeThreshold && !$('#Oval').attr('hidden')) {\n                console.log('üëÜ Swipe up detectado - abrindo chat');\n                $('#ChatBtn').click();\n            }\n        }\n        \n        // Toque duplo para ativar microfone (apenas na tela principal)\n        let lastTap = 0;\n        document.addEventListener('touchend', function(e) {\n            const currentTime = new Date().getTime();\n            const tapLength = currentTime - lastTap;\n            \n            if (tapLength < 500 && tapLength > 0) {\n                // Toque duplo detectado\n                if (!$('#Oval').attr('hidden') && !$('#MicBtn').attr('hidden')) {\n                    console.log('üëÜüëÜ Toque duplo detectado - ativando microfone');\n                    e.preventDefault();\n                    $('#MicBtn').click();\n                }\n            }\n            lastTap = currentTime;\n        }, {passive: false});\n        \n        console.log('üëÜ Gestos mobile adicionados: swipe up (chat), toque duplo (mic)');\n    }\n\n    // Verificar se textillate est√° dispon√≠vel antes de usar\n    if (typeof $.fn.textillate === 'function') {\n        $('.text').textillate({\n            loop: true,\n            sync: true,\n            in: {\n                effect: \"bounceIn\",\n            },\n            out: {\n                effect: \"bounceOut\",\n            },\n        });\n    } else {\n        console.warn('Textillate n√£o carregou, anima√ß√µes de texto desabilitadas');\n    }\n\n    // Siri configuration\n    var container = document.getElementById(\"siri-container\");\n    var sw = null;\n    \n    function initSiriWave() {\n        if (container && typeof SiriWave !== 'undefined') {\n            try {\n                sw = new SiriWave({\n                    container: container,\n                    width: container.clientWidth || 320,\n                    height: 160,\n                    style: \"ios9\",\n                    amplitude: 1,\n                    speed: 0.30,\n                    autostart: true\n                });\n                console.log('SiriWave inicializado com sucesso');\n            } catch (error) {\n                console.warn('Erro ao inicializar SiriWave:', error);\n            }\n        } else {\n            console.warn('SiriWave n√£o dispon√≠vel ou container n√£o encontrado');\n        }\n    }\n    \n    // Inicializar SiriWave\n    initSiriWave();\n    \n    // Recriar SiriWave no resize (m√©todo mais compat√≠vel)\n    window.addEventListener('resize', function() {\n        if (container && sw) {\n            try {\n                // Destruir inst√¢ncia anterior se existir\n                if (sw && typeof sw.stop === 'function') {\n                    sw.stop();\n                }\n                // Recriar com nova largura\n                initSiriWave();\n            } catch (error) {\n                console.warn('Erro no resize do SiriWave:', error);\n            }\n        }\n    });\n\n    // Siri message animation\n    if (typeof $.fn.textillate === 'function') {\n        $('.siri-message').textillate({\n            loop: true,\n            sync: true,\n            in: {\n                effect: \"fadeInUp\",\n                sync: true,\n            },\n            out: {\n                effect: \"fadeOutUp\",\n                sync: true,\n            },\n        });\n    }\n\n    // mic button click event - Sistema melhorado de reconhecimento de voz\n    $(\"#MicBtn\").click(function () {\n        console.log('üé§ Bot√£o de microfone clicado');\n        \n        // Verificar se o novo sistema de reconhecimento est√° dispon√≠vel\n        if (window.jarvisSpeechRecognition && window.jarvisSpeechRecognition.isAvailable()) {\n            startAdvancedSpeechRecognition();\n        } else {\n            // Fallback para o sistema original (eel)\n            console.log('üîÑ Usando sistema original (eel)');\n            startOriginalSpeechRecognition();\n        }\n    });\n    \n    // Fun√ß√£o para iniciar reconhecimento avan√ßado\n    function startAdvancedSpeechRecognition() {\n        console.log('üéÜ Iniciando reconhecimento avan√ßado de voz...');\n        \n        const speechRecognition = window.jarvisSpeechRecognition;\n        \n        // Verificar se j√° est√° ouvindo\n        if (speechRecognition.isActive()) {\n            console.log('‚ö†Ô∏è Reconhecimento j√° ativo, parando...');\n            speechRecognition.stop();\n            return;\n        }\n        \n        // Configurar callbacks\n        speechRecognition.onStart(() => {\n            console.log('üé§ Reconhecimento iniciado');\n            \n            // Ativar SiriWave\n            if (sw && typeof sw.start === 'function') {\n                sw.start();\n            }\n            \n            // Mostrar interface de escuta\n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            \n            // Atualizar mensagem\n            updateWishMessage('üé§ Escutando... Fale agora!');\n            \n            // Mudar √≠cone do bot√£o para indicar que est√° ouvindo\n            $('#MicBtn').html('<i class=\"bi bi-mic-fill\"></i>');\n            $('#MicBtn').css('background', 'rgba(255, 0, 0, 0.3)');\n        });\n        \n        speechRecognition.onInterim((transcript) => {\n            console.log('‚è≥ Transcri√ß√£o parcial:', transcript);\n            updateWishMessage(`üé§ Ouvindo: \"${transcript}\"`);\n        });\n        \n        speechRecognition.onResult((transcript, confidence) => {\n            console.log('‚úÖ Transcri√ß√£o final:', transcript);\n            console.log('üéØ Confian√ßa:', (confidence * 100).toFixed(1) + '%');\n            \n            // Limpar interface\n            resetMicInterface();\n            \n            // Processar comando\n            if (transcript && transcript.trim().length > 0) {\n                updateWishMessage(`üí¨ Voc√™ disse: \"${transcript}\"`);\n                \n                // Aguardar um pouco e processar\n                setTimeout(() => {\n                    PlayAssistant(transcript);\n                }, 1000);\n            } else {\n                updateWishMessage('‚ö†Ô∏è Nenhum comando detectado. Tente novamente.');\n                setTimeout(() => {\n                    updateWishMessage('Ask me anything');\n                }, 3000);\n            }\n        });\n        \n        speechRecognition.onError((error, message) => {\n            console.error('‚ùå Erro no reconhecimento:', error, message);\n            \n            // Limpar interface\n            resetMicInterface();\n            \n            // Mostrar erro amig√°vel\n            let userMessage = '‚ùå Erro no reconhecimento de voz.';\n            \n            switch (error) {\n                case 'not-allowed':\n                    userMessage = 'üö´ Permiss√£o de microfone negada. Clique no √≠cone de microfone na barra de endere√ßos para permitir.';\n                    break;\n                case 'no-speech':\n                    userMessage = 'üîá Nenhuma fala detectada. Tente falar mais alto ou verificar o microfone.';\n                    break;\n                case 'audio-capture':\n                    userMessage = 'üé§ Erro na capta√ß√£o de √°udio. Verifique se o microfone est√° conectado.';\n                    break;\n                case 'network':\n                    userMessage = 'üåê Erro de rede. Verifique sua conex√£o com a internet.';\n                    break;\n                case 'timeout':\n                    userMessage = '‚è∞ Tempo limite excedido. Tente falar mais r√°pido.';\n                    break;\n                default:\n                    userMessage = `‚ùå ${message || 'Erro desconhecido no reconhecimento de voz.'}`;\n            }\n            \n            updateWishMessage(userMessage);\n            \n            // Voltar para mensagem padr√£o ap√≥s alguns segundos\n            setTimeout(() => {\n                updateWishMessage('Ask me anything');\n            }, 5000);\n        });\n        \n        speechRecognition.onEnd(() => {\n            console.log('üîÑ Reconhecimento finalizado');\n            resetMicInterface();\n        });\n        \n        // Iniciar reconhecimento\n        const started = speechRecognition.start();\n        \n        if (!started) {\n            console.error('‚ùå Falha ao iniciar reconhecimento');\n            resetMicInterface();\n            updateWishMessage('‚ùå Erro ao iniciar reconhecimento de voz.');\n            \n            setTimeout(() => {\n                updateWishMessage('Ask me anything');\n            }, 3000);\n        }\n    }\n    \n    // Fun√ß√£o para resetar interface do microfone\n    function resetMicInterface() {\n        // Parar SiriWave\n        if (sw && typeof sw.stop === 'function') {\n            sw.stop();\n        }\n        \n        // Voltar para tela principal\n        $(\"#SiriWave\").attr(\"hidden\", true);\n        $(\"#Oval\").attr(\"hidden\", false);\n        \n        // Resetar bot√£o do microfone\n        $('#MicBtn').html('<i class=\"bi bi-mic\"></i>');\n        $('#MicBtn').css('background', '');\n    }\n    \n    // Fun√ß√£o para sistema original (fallback)\n    function startOriginalSpeechRecognition() {\n        console.log('üîÑ Iniciando sistema original de reconhecimento...');\n        \n        // Ativar SiriWave se dispon√≠vel\n        if (sw && typeof sw.start === 'function') {\n            sw.start();\n        }\n        \n        // Tentar usar eel se dispon√≠vel\n        if (typeof eel !== 'undefined' && eel.playAssistantSound && eel.allCommands) {\n            eel.playAssistantSound();\n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            eel.allCommands()();\n        } else {\n            // Se eel n√£o estiver dispon√≠vel, mostrar mensagem\n            updateWishMessage('‚ö†Ô∏è Sistema de reconhecimento n√£o dispon√≠vel. Use o campo de texto.');\n            \n            setTimeout(() => {\n                updateWishMessage('Ask me anything');\n            }, 3000);\n        }\n    }\n\n\n    function doc_keyUp(e) {\n        // this would test for whichever key is 40 (down arrow) and the ctrl key at the same time\n\n        if (e.key === 'j' && e.metaKey) {\n            eel.playAssistantSound()\n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            eel.allCommands()()\n        }\n    }\n    document.addEventListener('keyup', doc_keyUp, false);\n\n    // Configura√ß√£o da API do Render\n    const DEFAULT_API_URL = 'https://jarvis-tdgt.onrender.com';\n    \n    // Fun√ß√£o para enviar mensagem para o assistente\n    function PlayAssistant(message) {\n        if (message != \"\") {\n            console.log('üí¨ Enviando mensagem:', message);\n            \n            // Verificar comandos locais primeiro (GitHub Pages)\n            if (handleLocalCommands(message)) {\n                return;\n            }\n            \n            $(\"#Oval\").attr(\"hidden\", true);\n            $(\"#SiriWave\").attr(\"hidden\", false);\n            \n            // Ativar SiriWave se dispon√≠vel\n            if (sw && typeof sw.start === 'function') {\n                sw.start();\n            }\n            \n            // Mostrar indicador de carregamento\n            updateWishMessage(\"ü§ñ Processando sua mensagem...\");\n            \n            // URL da API (Render por padr√£o, ou configurada pelo usu√°rio)\n            const apiUrl = localStorage.getItem('FRONT_API_URL') || DEFAULT_API_URL;\n            console.log('üîó Usando API:', apiUrl);\n            \n            // Timeout mais longo para cold start do Render\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 segundos\n            \n            fetch(apiUrl.replace(/\\/$/, '') + '/command', {\n                method: 'POST',\n                headers: { \n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({ message }),\n                signal: controller.signal\n            })\n            .then(response => {\n                clearTimeout(timeoutId);\n                console.log('üì° Resposta da API:', response.status, response.statusText);\n                \n                if (!response.ok) {\n                    if (response.status === 503) {\n                        throw new Error('Servidor tempor√°riamente indispon√≠vel (cold start). Tente novamente em alguns segundos.');\n                    } else if (response.status === 500) {\n                        throw new Error('Erro interno do servidor. Verifique se a chave API est√° configurada.');\n                    } else {\n                        throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);\n                    }\n                }\n                return safeJsonParse(response, 'API');\n            })\n            .then(data => {\n                console.log('üìù Dados recebidos:', data);\n                \n                if (data && data.reply) {\n                    updateWishMessage(data.reply);\n                    console.log('‚úÖ Resposta processada com sucesso');\n                    \n                    // Se h√° fun√ß√£o eel dispon√≠vel, usa tamb√©m\n                    if (window.eel && window.eel.exposed_functions && window.eel.exposed_functions.receiverText) {\n                        window.eel.exposed_functions.receiverText(data.reply);\n                    }\n                } else if (data && data.error) {\n                    // Tratar erros espec√≠ficos da API\n                    console.log('‚ùå Erro da API:', data);\n                    \n                    let errorMessage = data.reply || 'Erro desconhecido';\n                    \n                    if (data.error === 'missing_api_key') {\n                        errorMessage = \"‚ö†Ô∏è Chave da API do Google n√£o configurada no servidor. Entre em contato com o administrador.\";\n                    } else if (data.error === 'network_error') {\n                        errorMessage = \"üåê Erro de conex√£o com a API do Google. Verifique a internet do servidor.\";\n                    } else if (data.error === 'format_error') {\n                        errorMessage = \"üìù Erro no formato da resposta da API do Google.\";\n                    } else if (data.error === 'internal_error') {\n                        errorMessage = `üîß Erro interno: ${data.error_type || 'Desconhecido'}. Detalhes: ${data.details || 'N/A'}`;\n                    }\n                    \n                    updateWishMessage(errorMessage);\n                    \n                    // Log detalhado para debug\n                    if (data.details) {\n                        console.log('üîç Detalhes do erro:', data.details);\n                    }\n                } else {\n                    updateWishMessage(\"ü§ñ Resposta inv√°lida da API. Tente novamente.\");\n                }\n            })\n            .catch(error => {\n                clearTimeout(timeoutId);\n                console.error('‚ùå Erro na API:', error);\n                \n                if (error.name === 'AbortError') {\n                    updateWishMessage(\"‚è±Ô∏è Timeout: A API demorou muito para responder. O servidor pode estar iniciando (cold start). Tente novamente em 30 segundos.\");\n                } else if (error.message.includes('Failed to fetch')) {\n                    updateWishMessage(\"üö´ Erro de conex√£o: Verifique sua internet ou se a API est√° dispon√≠vel.\");\n                } else {\n                    updateWishMessage(`‚ùå ${error.message}`);\n                }\n            })\n            .finally(() => {\n                // Parar SiriWave se dispon√≠vel\n                if (sw && typeof sw.stop === 'function') {\n                    sw.stop();\n                }\n                \n                // Limpar input e resetar bot√µes\n                $(\"#chatbox\").val(\"\");\n                $(\"#MicBtn\").attr('hidden', false);\n                $(\"#SendBtn\").attr('hidden', true);\n                \n                // Voltar para a tela principal ap√≥s 5 segundos (mais tempo para ler a resposta)\n                setTimeout(() => {\n                    $(\"#SiriWave\").attr(\"hidden\", true);\n                    $(\"#Oval\").attr(\"hidden\", false);\n                    updateWishMessage(\"Ask me anything\");\n                }, 5000);\n            });\n        }\n    }\n    \n    // Fun√ß√£o para atualizar a mensagem\n    function updateWishMessage(text) {\n        $(\"#WishMessage\").text(text);\n        \n        // Integra√ß√£o com TTS - falar a mensagem se dispon√≠vel\n        if (window.jarvisTTS && typeof window.jarvisTTS.speakResponse === 'function') {\n            // Aguardar um pouco para a mensagem aparecer na tela\n            setTimeout(() => {\n                window.jarvisTTS.speakResponse(text);\n            }, 500);\n        }\n    }\n    \n    // Fun√ß√£o para mostrar di√°logo de permiss√£o elegante\n    function showPermissionDialog(title, message, url, loadingMessage, successMessage) {\n        // Limpar input imediatamente\n        $(\"#chatbox\").val(\"\");\n        $(\"#MicBtn\").attr('hidden', false);\n        $(\"#SendBtn\").attr('hidden', true);\n        \n        // Detectar se √© dispositivo m√≥vel\n        const isMobile = window.innerWidth <= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n        \n        // Criar o di√°logo personalizado responsivo\n        const dialogHtml = `\n            <div id=\"permissionDialog\" style=\"\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.9);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10000;\n                backdrop-filter: blur(5px);\n                padding: ${isMobile ? '20px' : '40px'};\n                box-sizing: border-box;\n            \">\n                <div style=\"\n                    background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);\n                    border: 2px solid #00d4ff;\n                    border-radius: ${isMobile ? '20px' : '15px'};\n                    padding: ${isMobile ? '25px 20px' : '30px'};\n                    max-width: ${isMobile ? '350px' : '400px'};\n                    width: ${isMobile ? '95%' : '90%'};\n                    text-align: center;\n                    box-shadow: 0 0 30px rgba(0, 212, 255, 0.5);\n                    color: #00d4ff;\n                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    max-height: 90vh;\n                    overflow-y: auto;\n                \">\n                    <h3 style=\"margin: 0 0 ${isMobile ? '15px' : '20px'} 0; font-size: ${isMobile ? '20px' : '24px'}; text-shadow: 0 0 10px #00d4ff; line-height: 1.3;\">${title}</h3>\n                    <p style=\"margin: 0 0 ${isMobile ? '25px' : '30px'} 0; font-size: ${isMobile ? '15px' : '16px'}; line-height: 1.5;\">${message}</p>\n                    <div style=\"display: flex; gap: ${isMobile ? '12px' : '15px'}; justify-content: center; flex-direction: ${isMobile ? 'column' : 'row'};\">\n                        <button id=\"permissionAllow\" style=\"\n                            background: rgba(0, 212, 255, 0.2);\n                            border: 2px solid #00d4ff;\n                            color: #00d4ff;\n                            padding: ${isMobile ? '15px 20px' : '12px 25px'};\n                            border-radius: ${isMobile ? '12px' : '8px'};\n                            cursor: pointer;\n                            font-size: ${isMobile ? '18px' : '16px'};\n                            font-weight: bold;\n                            transition: all 0.3s ease;\n                            min-height: ${isMobile ? '50px' : 'auto'};\n                            touch-action: manipulation;\n                            order: ${isMobile ? '1' : '0'};\n                        \">‚úÖ Sim, abrir</button>\n                        <button id=\"permissionDeny\" style=\"\n                            background: rgba(255, 0, 0, 0.2);\n                            border: 2px solid #ff4444;\n                            color: #ff4444;\n                            padding: ${isMobile ? '15px 20px' : '12px 25px'};\n                            border-radius: ${isMobile ? '12px' : '8px'};\n                            cursor: pointer;\n                            font-size: ${isMobile ? '18px' : '16px'};\n                            font-weight: bold;\n                            transition: all 0.3s ease;\n                            min-height: ${isMobile ? '50px' : 'auto'};\n                            touch-action: manipulation;\n                            order: ${isMobile ? '2' : '0'};\n                        \">‚ùå Cancelar</button>\n                    </div>\n                    <p style=\"margin: ${isMobile ? '15px' : '20px'} 0 0 0; font-size: ${isMobile ? '11px' : '12px'}; opacity: 0.7; line-height: 1.3;\">üîí Sua seguran√ßa √© importante para n√≥s</p>\n                </div>\n            </div>\n        `;\n        \n        // Adicionar o di√°logo ao body\n        $('body').append(dialogHtml);\n        \n        // Adicionar efeitos hover via JavaScript\n        $('#permissionAllow').hover(\n            function() { $(this).css('background', 'rgba(0, 212, 255, 0.4)'); },\n            function() { $(this).css('background', 'rgba(0, 212, 255, 0.2)'); }\n        );\n        \n        $('#permissionDeny').hover(\n            function() { $(this).css('background', 'rgba(255, 0, 0, 0.4)'); },\n            function() { $(this).css('background', 'rgba(255, 0, 0, 0.2)'); }\n        );\n        \n        // Handler para \"Sim, abrir\"\n        $('#permissionAllow').click(function() {\n            $('#permissionDialog').remove();\n            openExternalSite(url, loadingMessage, successMessage);\n        });\n        \n        // Handler para \"Cancelar\"\n        $('#permissionDeny').click(function() {\n            $('#permissionDialog').remove();\n            updateWishMessage(\"‚ùå Opera√ß√£o cancelada pelo usu√°rio\");\n            \n            // Voltar para tela principal ap√≥s 2 segundos\n            setTimeout(() => {\n                updateWishMessage(\"Ask me anything\");\n            }, 2000);\n        });\n        \n        // Fechar com ESC\n        $(document).on('keydown.permissionDialog', function(e) {\n            if (e.key === 'Escape') {\n                $('#permissionDialog').remove();\n                $(document).off('keydown.permissionDialog');\n                updateWishMessage(\"‚ùå Opera√ß√£o cancelada\");\n                setTimeout(() => {\n                    updateWishMessage(\"Ask me anything\");\n                }, 2000);\n            }\n        });\n    }\n    \n    // Fun√ß√£o para abrir site externo com feedback visual\n    function openExternalSite(url, loadingMessage, successMessage) {\n        console.log('üöÄ Abrindo site:', url);\n        \n        // Mostrar tela de carregamento\n        $(\"#Oval\").attr(\"hidden\", true);\n        $(\"#SiriWave\").attr(\"hidden\", false);\n        \n        // Ativar SiriWave\n        if (sw && typeof sw.start === 'function') {\n            sw.start();\n        }\n        \n        updateWishMessage(loadingMessage);\n        \n        // Abrir site com m√∫ltiplas tentativas\n        setTimeout(() => {\n            try {\n                // Primeira tentativa: window.open\n                const newWindow = window.open(url, '_blank', 'noopener,noreferrer');\n                \n                if (newWindow) {\n                    console.log('‚úÖ Site aberto com window.open');\n                    updateWishMessage(successMessage);\n                } else {\n                    console.warn('‚ö†Ô∏è window.open bloqueado, tentando alternativa...');\n                    \n                    // Segunda tentativa: criar link e clicar\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.target = '_blank';\n                    link.rel = 'noopener noreferrer';\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    \n                    console.log('‚úÖ Site aberto com link click');\n                    updateWishMessage(successMessage + \" (Verifique se n√£o foi bloqueado pelo navegador)\");\n                }\n            } catch (error) {\n                console.error('‚ùå Erro ao abrir site:', error);\n                updateWishMessage(`‚ùå Erro ao abrir ${url}. Copie e cole: ${url}`);\n                \n                // Terceira tentativa: copiar para clipboard\n                try {\n                    navigator.clipboard.writeText(url);\n                    updateWishMessage(\"üìã Link copiado! Cole no navegador: Ctrl+V\");\n                } catch (clipError) {\n                    console.error('‚ùå Erro ao copiar para clipboard:', clipError);\n                }\n            }\n            \n            // Parar SiriWave\n            if (sw && typeof sw.stop === 'function') {\n                sw.stop();\n            }\n            \n            // Voltar para tela principal\n            setTimeout(() => {\n                $(\"#SiriWave\").attr(\"hidden\", true);\n                $(\"#Oval\").attr(\"hidden\", false);\n                updateWishMessage(\"Ask me anything\");\n            }, 3000);\n        }, 1000);\n    }\n    \n    // Fun√ß√£o para lidar com comandos locais no GitHub Pages\n    function handleLocalCommands(message) {\n        console.log('üîç DEBUG: Verificando comando local:', message);\n        const msg = message.toLowerCase().trim();\n        console.log('üîç DEBUG: Mensagem normalizada:', msg);\n        \n        // Comandos do WhatsApp - Detec√ß√£o mais ampla\n        const whatsappKeywords = ['whatsapp', 'whats app', 'whats', 'zap', 'abrir whatsapp', 'abra whatsapp', 'abre whatsapp'];\n        const isWhatsAppCommand = whatsappKeywords.some(keyword => msg.includes(keyword));\n        \n        console.log('üîç DEBUG: √â comando WhatsApp?', isWhatsAppCommand);\n        \n        if (isWhatsAppCommand) {\n            console.log('üéØ COMANDO WHATSAPP DETECTADO LOCALMENTE!');\n            \n            // Solicitar permiss√£o do usu√°rio\n            showPermissionDialog(\n                'üì± WhatsApp Web',\n                'Deseja abrir o WhatsApp Web em uma nova aba?',\n                'https://web.whatsapp.com',\n                'üì± Abrindo WhatsApp Web...',\n                '‚úÖ WhatsApp Web aberto com sucesso!'\n            );\n            \n            return true; // Comando processado localmente\n        }\n        \n        // Outros comandos locais\n        if (msg.includes('google') || msg.includes('pesquisar google') || msg.includes('pesquise google')) {\n            console.log('üéØ Comando Google detectado localmente');\n            \n            showPermissionDialog(\n                'üîç Google',\n                'Deseja abrir o Google em uma nova aba?',\n                'https://www.google.com',\n                'üîç Abrindo Google...',\n                '‚úÖ Google aberto com sucesso!'\n            );\n            \n            return true;\n        }\n        \n        if (msg.includes('youtube')) {\n            console.log('üéØ Comando YouTube detectado localmente');\n            \n            showPermissionDialog(\n                'üé• YouTube',\n                'Deseja abrir o YouTube em uma nova aba?',\n                'https://www.youtube.com',\n                'üé• Abrindo YouTube...',\n                '‚úÖ YouTube aberto com sucesso!'\n            );\n            \n            return true;\n        }\n        \n        console.log('üîç DEBUG: Nenhum comando local detectado, enviando para API');\n        return false; // N√£o √© comando local, enviar para API\n    }\n\n    // toogle fucntion to hide and display mic and send button \n    function ShowHideButton(message) {\n        if (message.length == 0) {\n            $(\"#MicBtn\").attr('hidden', false);\n            $(\"#SendBtn\").attr('hidden', true);\n        }\n        else {\n            $(\"#MicBtn\").attr('hidden', true);\n            $(\"#SendBtn\").attr('hidden', false);\n        }\n    }\n\n    // key up event handler on text box\n    $(\"#chatbox\").keyup(function () {\n\n        let message = $(\"#chatbox\").val();\n        ShowHideButton(message)\n    \n    });\n    \n    // send button event handler\n    $(\"#SendBtn\").click(function () {\n    \n        let message = $(\"#chatbox\").val()\n        PlayAssistant(message)\n    \n    });\n\n    // settings button: configure backend URL\n    $(\"#SettingsBtn\").click(function () {\n        // Usar o handler do TTS se dispon√≠vel, sen√£o usar o padr√£o\n        if (window.jarvisTTS && typeof window.jarvisTTS.showTTSSettings === 'function') {\n            // Se TTS est√° carregado, usar o menu expandido\n            const options = [\n                'üîß Configurar URL da API',\n                'üß™ Testar conex√£o',\n                'üí¨ Teste r√°pido de mensagem',\n                'üó£Ô∏è Configura√ß√µes de Voz',\n                'üé§ Testar Text-to-Speech',\n                'üé§ Testar Reconhecimento de Voz',\n                'üîç Diagn√≥stico de √Åudio',\n                'üìä Ver logs do console',\n                '‚ùå Cancelar'\n            ];\n            \n            const choice = prompt(`Configura√ß√µes do Jarvis:\\n\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\n')}\\n\\nEscolha uma op√ß√£o (1-${options.length}):`);\n            \n            switch(choice) {\n                case '1':\n                    configureApiUrl();\n                    break;\n                case '2':\n                    testApiConnection();\n                    break;\n                case '3':\n                    PlayAssistant('Ol√°, voc√™ est√° funcionando?');\n                    break;\n                case '4':\n                    window.jarvisTTS.showTTSSettings();\n                    break;\n                case '5':\n                    window.jarvisTTS.testTTS();\n                    break;\n                case '6':\n                    testSpeechRecognition();\n                    break;\n                case '7':\n                    runAudioDiagnostic();\n                    break;\n                case '8':\n                    alert('üìä Verifique o console do navegador (F12) para ver os logs detalhados.');\n                    break;\n                default:\n                    return;\n            }\n        } else {\n            // Handler padr√£o (fallback)\n            const options = [\n                'üîß Configurar URL da API',\n                'üß™ Testar conex√£o',\n                'üí¨ Teste r√°pido de mensagem',\n                'üìä Ver logs do console',\n                '‚ùå Cancelar'\n            ];\n            \n            const choice = prompt(`Configura√ß√µes do Jarvis:\\n\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\n')}\\n\\nEscolha uma op√ß√£o (1-${options.length}):`);\n            \n            switch(choice) {\n                case '1':\n                    configureApiUrl();\n                    break;\n                case '2':\n                    testApiConnection();\n                    break;\n                case '3':\n                    PlayAssistant('Ol√°, voc√™ est√° funcionando?');\n                    break;\n                case '4':\n                    alert('üìä Verifique o console do navegador (F12) para ver os logs detalhados.');\n                    break;\n                default:\n                    return;\n            }\n        }\n    });\n    \n    function configureApiUrl() {\n        const current = localStorage.getItem('FRONT_API_URL') || DEFAULT_API_URL;\n        const input = prompt(`URL da API do Jarvis:\\n\\nPadr√£o: ${DEFAULT_API_URL}\\nAtual: ${current}\\n\\nDigite a nova URL ou deixe vazio para usar o padr√£o:`, current);\n        if (input === null) return; // cancel\n        const trimmed = (input || '').trim();\n        if (trimmed === '' || trimmed === DEFAULT_API_URL) {\n            localStorage.removeItem('FRONT_API_URL');\n            alert(`‚úÖ Usando API padr√£o: ${DEFAULT_API_URL}`);\n        } else {\n            localStorage.setItem('FRONT_API_URL', trimmed);\n            alert(`‚úÖ API configurada: ${trimmed}`);\n        }\n        \n        // Testar a conex√£o\n        testApiConnection();\n    }\n    \n    // Fun√ß√£o para testar reconhecimento de voz\n    function testSpeechRecognition() {\n        console.log('üé§ Iniciando teste de reconhecimento de voz...');\n        \n        if (!window.jarvisSpeechRecognition) {\n            alert('‚ùå Sistema de reconhecimento de voz n√£o carregado. Recarregue a p√°gina.');\n            return;\n        }\n        \n        const speechRecognition = window.jarvisSpeechRecognition;\n        \n        if (!speechRecognition.isAvailable()) {\n            alert('‚ùå Reconhecimento de voz n√£o suportado neste navegador.\\n\\nNavegadores suportados:\\n‚Ä¢ Chrome\\n‚Ä¢ Edge\\n‚Ä¢ Safari (parcial)');\n            return;\n        }\n        \n        alert('üé§ Teste de Reconhecimento de Voz\\n\\nClique OK e fale algo como:\\n‚Ä¢ \"Ol√° Jarvis\"\\n‚Ä¢ \"Abrir WhatsApp\"\\n‚Ä¢ \"Como voc√™ est√°?\"\\n\\nO resultado aparecer√° na tela.');\n        \n        // Configurar callbacks para o teste\n        speechRecognition.onStart(() => {\n            updateWishMessage('üé§ TESTE: Fale agora! Diga algo...');\n        });\n        \n        speechRecognition.onInterim((transcript) => {\n            updateWishMessage(`üé§ TESTE: Ouvindo \"${transcript}\"`);\n        });\n        \n        speechRecognition.onResult((transcript, confidence) => {\n            const confidencePercent = (confidence * 100).toFixed(1);\n            updateWishMessage(`‚úÖ TESTE CONCLU√çDO!\\nVoc√™ disse: \"${transcript}\"\\nConfian√ßa: ${confidencePercent}%`);\n            \n            // Voltar ao normal ap√≥s 5 segundos\n            setTimeout(() => {\n                updateWishMessage('Ask me anything');\n            }, 5000);\n        });\n        \n        speechRecognition.onError((error, message) => {\n            updateWishMessage(`‚ùå TESTE FALHOU: ${message}`);\n            \n            setTimeout(() => {\n                updateWishMessage('Ask me anything');\n            }, 5000);\n        });\n        \n        // Iniciar teste\n        speechRecognition.start();\n    }\n    \n    // Fun√ß√£o para diagn√≥stico de √°udio\n    async function runAudioDiagnostic() {\n        console.log('üîç Executando diagn√≥stico de √°udio...');\n        \n        updateWishMessage('üîç Executando diagn√≥stico de √°udio...');\n        \n        let report = 'üîç DIAGN√ìSTICO DE √ÅUDIO\\n\\n';\n        \n        // Verificar suporte a Speech Recognition\n        const speechSupported = !!(window.SpeechRecognition || window.webkitSpeechRecognition);\n        report += `üé§ Speech Recognition: ${speechSupported ? '‚úÖ Suportado' : '‚ùå N√£o suportado'}\\n`;\n        \n        // Verificar suporte a TTS\n        const ttsSupported = 'speechSynthesis' in window;\n        report += `üó£Ô∏è Text-to-Speech: ${ttsSupported ? '‚úÖ Suportado' : '‚ùå N√£o suportado'}\\n`;\n        \n        // Verificar contexto seguro\n        const isSecure = window.isSecureContext;\n        report += `üîí Contexto Seguro: ${isSecure ? '‚úÖ HTTPS' : '‚ùå HTTP (recomenda-se HTTPS)'}\\n`;\n        \n        // Verificar acesso ao microfone\n        if (window.jarvisSpeechRecognition) {\n            const micAccess = await window.jarvisSpeechRecognition.testMicrophone();\n            report += `üé§ Acesso ao Microfone: ${micAccess ? '‚úÖ Permitido' : '‚ùå Negado ou indispon√≠vel'}\\n`;\n        }\n        \n        // Verificar navegador\n        const userAgent = navigator.userAgent;\n        let browser = 'Desconhecido';\n        if (userAgent.includes('Chrome')) browser = 'Chrome ‚úÖ';\n        else if (userAgent.includes('Firefox')) browser = 'Firefox ‚ö†Ô∏è (suporte limitado)';\n        else if (userAgent.includes('Safari')) browser = 'Safari ‚ö†Ô∏è (suporte parcial)';\n        else if (userAgent.includes('Edge')) browser = 'Edge ‚úÖ';\n        \n        report += `üåê Navegador: ${browser}\\n`;\n        \n        // Verificar dispositivo\n        const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\n        report += `üì± Dispositivo: ${isMobile ? 'M√≥vel' : 'Desktop'}\\n`;\n        \n        // Recomenda√ß√µes\n        report += '\\nüí° RECOMENDA√á√ïES:\\n';\n        \n        if (!speechSupported) {\n            report += '‚Ä¢ Use Chrome ou Edge para melhor suporte\\n';\n        }\n        \n        if (!isSecure) {\n            report += '‚Ä¢ Use HTTPS para melhor funcionamento\\n';\n        }\n        \n        if (window.jarvisSpeechRecognition) {\n            const micAccess = await window.jarvisSpeechRecognition.testMicrophone();\n            if (!micAccess) {\n                report += '‚Ä¢ Permita acesso ao microfone nas configura√ß√µes\\n';\n            }\n        }\n        \n        if (isMobile) {\n            report += '‚Ä¢ Em mobile, toque no bot√£o de microfone para ativar\\n';\n        }\n        \n        // Mostrar relat√≥rio\n        alert(report);\n        \n        // Atualizar mensagem\n        updateWishMessage('‚úÖ Diagn√≥stico conclu√≠do! Verifique o resultado.');\n        \n        setTimeout(() => {\n            updateWishMessage('Ask me anything');\n        }, 3000);\n        \n        console.log('üìä Relat√≥rio de diagn√≥stico:', report);\n    }\n    \n    // Tornar fun√ß√µes dispon√≠veis globalmente para o TTS\n    window.jarvisSettingsHandler = function(choice) {\n        switch(choice) {\n            case '1':\n                configureApiUrl();\n                break;\n            case '2':\n                testApiConnection();\n                break;\n            case '3':\n                PlayAssistant('Ol√°, voc√™ est√° funcionando?');\n                break;\n            case '6':\n                alert('üìä Verifique o console do navegador (F12) para ver os logs detalhados.');\n                break;\n            default:\n                return;\n        }\n    };\n    \n\n    \n\n    // enter press event handler on chat box\n    $(\"#chatbox\").keypress(function (e) {\n        key = e.which;\n        if (key == 13) {\n            let message = $(\"#chatbox\").val()\n            PlayAssistant(message)\n        }\n    });\n    \n    // Fun√ß√£o de inicializa√ß√£o do Jarvis\n    function initializeJarvis() {\n        console.log('ü§ñ Iniciando sequ√™ncia de inicializa√ß√£o do Jarvis...');\n        \n        // Estado inicial: mostrar apenas o loader\n        showOnlyElement('#Loader');\n        updateWishMessage('üîÑ Initializing systems...');\n        \n        // Permitir pular anima√ß√£o com clique ou tecla\n        let skipInitialization = false;\n        \n        function skipToMain() {\n            if (!skipInitialization) {\n                skipInitialization = true;\n                console.log('‚è© Pulando anima√ß√£o de inicializa√ß√£o');\n                goToMainScreen();\n            }\n        }\n        \n        // Event listeners para pular\n        $(document).one('click', skipToMain);\n        $(document).one('keydown', function(e) {\n            if (e.key === 'Enter' || e.key === ' ' || e.key === 'Escape') {\n                skipToMain();\n            }\n        });\n        \n        // Sequ√™ncia de inicializa√ß√£o\n        setTimeout(() => {\n            if (skipInitialization) return;\n            \n            // Fase 1: Face Authentication\n            showOnlyElement('#FaceAuth');\n            updateWishMessage('üîç Scanning biometric data...');\n            \n            setTimeout(() => {\n                if (skipInitialization) return;\n                \n                // Fase 2: Authentication Success\n                showOnlyElement('#FaceAuthSuccess');\n                updateWishMessage('‚úÖ Authentication successful!');\n                \n                setTimeout(() => {\n                    if (skipInitialization) return;\n                    \n                    // Fase 3: Hello Greeting\n                    showOnlyElement('#HelloGreet');\n                    updateWishMessage('üëã Hello! I am J.A.R.V.I.S');\n                    \n                    setTimeout(() => {\n                        if (skipInitialization) return;\n                        \n                        // Testar API durante a inicializa√ß√£o\n                        updateWishMessage('üîå Connecting to neural network...');\n                        setTimeout(() => {\n                            testApiConnection();\n                        }, 500);\n                        \n                        setTimeout(() => {\n                            if (skipInitialization) return;\n                            goToMainScreen();\n                        }, 2000);\n                        \n                    }, 2000);\n                }, 2000);\n            }, 2000);\n        }, 3000);\n        \n        // Fun√ß√£o para mostrar apenas um elemento da tela de loading\n        function showOnlyElement(selector) {\n            $('#Loader, #FaceAuth, #FaceAuthSuccess, #HelloGreet').attr('hidden', true);\n            $(selector).attr('hidden', false);\n        }\n        \n        // Fun√ß√£o para ir para a tela principal\n        function goToMainScreen() {\n            console.log('‚úÖ Inicializa√ß√£o completa! Indo para tela principal...');\n            \n            // Remover event listeners de pular\n            $(document).off('click keydown');\n            \n            // Esconder tela de loading e mostrar tela principal\n            $('#Start').attr('hidden', true);\n            $('#Oval').attr('hidden', false);\n            \n            // Mensagem de boas-vindas\n            updateWishMessage('üéÜ Welcome! How can I assist you today?');\n            \n            // Focar no input de texto\n            setTimeout(() => {\n                $('#chatbox').focus();\n            }, 500);\n        }\n    }\n    \n    // Fun√ß√£o melhorada para testar conex√£o com a API\n    function testApiConnection() {\n        const apiUrl = localStorage.getItem('FRONT_API_URL') || DEFAULT_API_URL;\n        console.log('üîå Testando conex√£o com:', apiUrl);\n        \n        updateWishMessage('üîÑ Testando conex√£o com a API...');\n        \n        const startTime = Date.now();\n        \n        fetch(apiUrl.replace(/\\/$/, '') + '/health', {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' },\n            cache: 'no-cache'\n        })\n        .then(response => {\n            const responseTime = Date.now() - startTime;\n            console.log(`üì° Resposta em ${responseTime}ms:`, response.status, response.statusText);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            return safeJsonParse(response, 'health check');\n        })\n        .then(data => {\n            const responseTime = Date.now() - startTime;\n            console.log('üìù Dados do health check:', data);\n            \n            if (data.status === 'ok') {\n                const provider = data.api_provider || 'none';\n                const providerEmoji = provider === 'groq' ? '‚ö°' : provider === 'google' ? 'ü§ñ' : '‚ùå';\n                const message = `‚úÖ API conectada! (${responseTime}ms)\\nProvedor: ${providerEmoji} ${provider.toUpperCase()}\\nAmbiente: ${data.environment}\\nAPI configurada: ${data.api_configured ? 'Sim' : 'N√£o'}`;\n                updateWishMessage(message);\n                console.log(`‚úÖ API conectada com sucesso! Provedor: ${provider}`);\n                \n                if (!data.api_configured) {\n                    console.warn('‚ö†Ô∏è Nenhuma API Key configurada no servidor');\n                    setTimeout(() => {\n                        updateWishMessage('‚ö†Ô∏è Nenhuma API Key configurada. Configure GROQ_API_KEY ou GOOGLE_API_KEY no Render Dashboard.');\n                    }, 3000);\n                }\n            } else {\n                updateWishMessage('‚ö†Ô∏è API respondeu mas status n√£o √© OK');\n                console.warn('‚ö†Ô∏è API n√£o est√° funcionando corretamente:', data);\n            }\n        })\n        .catch(error => {\n            const responseTime = Date.now() - startTime;\n            console.error('‚ùå Erro de conex√£o com API:', error);\n            \n            let errorMessage = '‚ùå Erro de conex√£o';\n            if (error.message.includes('Failed to fetch')) {\n                errorMessage = 'üö´ Erro de rede: Verifique sua conex√£o ou se a API est√° online';\n            } else if (error.message.includes('503')) {\n                errorMessage = 'üîÑ Servidor iniciando (cold start). Aguarde 30 segundos e tente novamente';\n            } else {\n                errorMessage = `‚ùå ${error.message}`;\n            }\n            \n            updateWishMessage(`${errorMessage} (${responseTime}ms)`);\n        });\n    }\n\n});"