/**\n * Jarvis Google Cloud Text-to-Speech Module\n * Integração com Google Cloud TTS API\n * Compatível com GitHub Pages e sistema local\n */\n\nclass JarvisGoogleTTS {\n    constructor() {\n        this.apiKey = null;\n        this.isEnabled = false;\n        this.isSupported = true;\n        this.currentAudio = null;\n        this.settings = {\n            languageCode: 'pt-BR',\n            voiceName: 'pt-BR-Standard-A', // Voz feminina padrão\n            ssmlGender: 'FEMALE',\n            audioEncoding: 'MP3',\n            speakingRate: 1.0,\n            pitch: 0.0,\n            volumeGainDb: 0.0,\n            autoSpeak: true,\n            fallbackToNative: true // Usar TTS nativo se Google falhar\n        };\n        \n        // Vozes disponíveis do Google Cloud TTS para português\n        this.availableVoices = {\n            'pt-BR': {\n                'pt-BR-Standard-A': { gender: 'FEMALE', type: 'Standard', description: 'Voz feminina padrão' },\n                'pt-BR-Standard-B': { gender: 'MALE', type: 'Standard', description: 'Voz masculina padrão' },\n                'pt-BR-Standard-C': { gender: 'FEMALE', type: 'Standard', description: 'Voz feminina alternativa' },\n                'pt-BR-Wavenet-A': { gender: 'FEMALE', type: 'WaveNet', description: 'Voz feminina premium' },\n                'pt-BR-Wavenet-B': { gender: 'MALE', type: 'WaveNet', description: 'Voz masculina premium' },\n                'pt-BR-Wavenet-C': { gender: 'FEMALE', type: 'WaveNet', description: 'Voz feminina premium alt.' },\n                'pt-BR-Neural2-A': { gender: 'FEMALE', type: 'Neural2', description: 'Voz neural feminina' },\n                'pt-BR-Neural2-B': { gender: 'MALE', type: 'Neural2', description: 'Voz neural masculina' },\n                'pt-BR-Neural2-C': { gender: 'FEMALE', type: 'Neural2', description: 'Voz neural feminina alt.' }\n            }\n        };\n        \n        this.init();\n    }\n\n    init() {\n        console.log('🌐 Inicializando Google Cloud TTS...');\n        \n        // Carregar configurações salvas\n        this.loadSettings();\n        \n        // Verificar se há API key configurada\n        this.checkApiKey();\n        \n        // Adicionar controles à interface\n        this.addGoogleTTSControls();\n        \n        console.log('✅ Google Cloud TTS inicializado');\n    }\n\n    loadSettings() {\n        try {\n            const saved = localStorage.getItem('jarvis_google_tts_settings');\n            if (saved) {\n                const parsedSettings = JSON.parse(saved);\n                this.settings = { ...this.settings, ...parsedSettings };\n                console.log('⚙️ Configurações Google TTS carregadas');\n            }\n            \n            // Carregar API key\n            this.apiKey = localStorage.getItem('jarvis_google_tts_api_key');\n            if (this.apiKey) {\n                this.isEnabled = true;\n                console.log('🔑 API Key do Google TTS carregada');\n            }\n        } catch (error) {\n            console.warn('⚠️ Erro ao carregar configurações Google TTS:', error);\n        }\n    }\n\n    saveSettings() {\n        try {\n            localStorage.setItem('jarvis_google_tts_settings', JSON.stringify(this.settings));\n            if (this.apiKey) {\n                localStorage.setItem('jarvis_google_tts_api_key', this.apiKey);\n            }\n            console.log('💾 Configurações Google TTS salvas');\n        } catch (error) {\n            console.warn('⚠️ Erro ao salvar configurações Google TTS:', error);\n        }\n    }\n\n    checkApiKey() {\n        if (!this.apiKey) {\n            console.log('🔑 API Key do Google Cloud TTS não configurada');\n            this.isEnabled = false;\n        }\n    }\n\n    async speak(text, options = {}) {\n        if (!text || !text.trim()) {\n            return Promise.resolve();\n        }\n\n        const cleanText = this.cleanText(text);\n        if (!cleanText) {\n            return Promise.resolve();\n        }\n\n        console.log('🗣️ Google TTS falando:', cleanText);\n\n        // Se Google TTS não estiver disponível, usar fallback\n        if (!this.isEnabled || !this.apiKey) {\n            if (this.settings.fallbackToNative && window.jarvisTTS) {\n                console.log('🔄 Usando TTS nativo como fallback');\n                return window.jarvisTTS.speak(cleanText, options);\n            }\n            return Promise.resolve();\n        }\n\n        try {\n            // Parar áudio anterior\n            this.stop();\n\n            // Preparar dados para a API\n            const requestData = {\n                input: { text: cleanText },\n                voice: {\n                    languageCode: options.languageCode || this.settings.languageCode,\n                    name: options.voiceName || this.settings.voiceName,\n                    ssmlGender: options.ssmlGender || this.settings.ssmlGender\n                },\n                audioConfig: {\n                    audioEncoding: this.settings.audioEncoding,\n                    speakingRate: options.speakingRate || this.settings.speakingRate,\n                    pitch: options.pitch || this.settings.pitch,\n                    volumeGainDb: options.volumeGainDb || this.settings.volumeGainDb\n                }\n            };\n\n            // Fazer requisição para Google Cloud TTS\n            const response = await fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${this.apiKey}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestData)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Google TTS API Error: ${response.status} ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            \n            if (!data.audioContent) {\n                throw new Error('Nenhum conteúdo de áudio retornado pela API');\n            }\n\n            // Converter base64 para blob e reproduzir\n            await this.playAudioFromBase64(data.audioContent);\n            \n            console.log('✅ Google TTS reproduzido com sucesso');\n            \n        } catch (error) {\n            console.error('❌ Erro no Google TTS:', error);\n            \n            // Usar fallback se configurado\n            if (this.settings.fallbackToNative && window.jarvisTTS) {\n                console.log('🔄 Usando TTS nativo como fallback após erro');\n                return window.jarvisTTS.speak(cleanText, options);\n            }\n            \n            throw error;\n        }\n    }\n\n    async playAudioFromBase64(base64Audio) {\n        return new Promise((resolve, reject) => {\n            try {\n                // Converter base64 para blob\n                const binaryString = atob(base64Audio);\n                const bytes = new Uint8Array(binaryString.length);\n                for (let i = 0; i < binaryString.length; i++) {\n                    bytes[i] = binaryString.charCodeAt(i);\n                }\n                \n                const blob = new Blob([bytes], { type: 'audio/mpeg' });\n                const audioUrl = URL.createObjectURL(blob);\n                \n                // Criar elemento de áudio\n                this.currentAudio = new Audio(audioUrl);\n                \n                this.currentAudio.onended = () => {\n                    URL.revokeObjectURL(audioUrl);\n                    this.currentAudio = null;\n                    resolve();\n                };\n                \n                this.currentAudio.onerror = (error) => {\n                    URL.revokeObjectURL(audioUrl);\n                    this.currentAudio = null;\n                    reject(new Error('Erro ao reproduzir áudio'));\n                };\n                \n                // Reproduzir áudio\n                this.currentAudio.play();\n                \n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    cleanText(text) {\n        if (!text) return '';\n        \n        return text\n            // Remover emojis\n            .replace(/[\\u{1F600}-\\u{1F64F}]/gu, '')\n            .replace(/[\\u{1F300}-\\u{1F5FF}]/gu, '')\n            .replace(/[\\u{1F680}-\\u{1F6FF}]/gu, '')\n            .replace(/[\\u{1F1E0}-\\u{1F1FF}]/gu, '')\n            .replace(/[\\u{2600}-\\u{26FF}]/gu, '')\n            .replace(/[\\u{2700}-\\u{27BF}]/gu, '')\n            // Remover símbolos específicos\n            .replace(/[🤖🗣️📱✅❌⚠️🔄🔍🎯📡📝🌊🔙💬🚫⏱️🔌🎆💾⚙️🎤🌐🔑]/g, '')\n            // Limpar espaços\n            .replace(/\\s+/g, ' ')\n            .replace(/\\n/g, ' ')\n            .trim();\n    }\n\n    stop() {\n        if (this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio.currentTime = 0;\n            this.currentAudio = null;\n            console.log('⏹️ Google TTS interrompido');\n        }\n    }\n\n    pause() {\n        if (this.currentAudio && !this.currentAudio.paused) {\n            this.currentAudio.pause();\n            console.log('⏸️ Google TTS pausado');\n        }\n    }\n\n    resume() {\n        if (this.currentAudio && this.currentAudio.paused) {\n            this.currentAudio.play();\n            console.log('▶️ Google TTS retomado');\n        }\n    }\n\n    toggle() {\n        if (!this.apiKey) {\n            this.setupApiKey();\n            return;\n        }\n        \n        this.isEnabled = !this.isEnabled;\n        this.saveSettings();\n        console.log(`🌐 Google TTS ${this.isEnabled ? 'ativado' : 'desativado'}`);\n        \n        if (!this.isEnabled) {\n            this.stop();\n        }\n        \n        this.updateGoogleTTSButton();\n    }\n\n    setupApiKey() {\n        const instructions = `\n🔑 CONFIGURAÇÃO DA API KEY DO GOOGLE CLOUD TTS\n\n📋 PASSOS:\n\n1. Acesse: https://console.cloud.google.com/\n2. Crie um projeto ou selecione um existente\n3. Ative a API \"Cloud Text-to-Speech\"\n4. Vá em \"Credenciais\" > \"Criar credenciais\" > \"Chave de API\"\n5. Copie a chave gerada\n\n💰 COTA GRATUITA:\n• Standard: 4 milhões de caracteres/mês GRÁTIS\n• WaveNet/Neural2: 1 milhão de caracteres/mês GRÁTIS\n\n🔒 SEGURANÇA:\n• Restrinja a chave apenas para Text-to-Speech API\n• Configure restrições de domínio se necessário\n        `;\n        \n        alert(instructions);\n        \n        const apiKey = prompt('🔑 Cole sua API Key do Google Cloud TTS:');\n        \n        if (apiKey && apiKey.trim()) {\n            this.apiKey = apiKey.trim();\n            this.isEnabled = true;\n            this.saveSettings();\n            alert('✅ API Key configurada com sucesso!\\n\\n🧪 Teste agora usando o menu de configurações.');\n            this.updateGoogleTTSButton();\n        }\n    }\n\n    addGoogleTTSControls() {\n        // Adicionar botão de toggle Google TTS\n        const textInputDiv = document.getElementById('TextInput');\n        if (textInputDiv) {\n            const googleTtsBtn = document.createElement('button');\n            googleTtsBtn.id = 'GoogleTTSBtn';\n            googleTtsBtn.className = 'glow-on-hover';\n            googleTtsBtn.innerHTML = '<i class=\"bi bi-cloud\"></i>';\n            googleTtsBtn.title = 'Google Cloud TTS';\n            googleTtsBtn.onclick = () => this.toggle();\n            \n            textInputDiv.appendChild(googleTtsBtn);\n            this.updateGoogleTTSButton();\n        }\n\n        // Integrar com menu de configurações existente\n        this.integrateWithSettings();\n    }\n\n    updateGoogleTTSButton() {\n        const googleTtsBtn = document.getElementById('GoogleTTSBtn');\n        if (googleTtsBtn) {\n            const icon = googleTtsBtn.querySelector('i');\n            \n            if (!this.apiKey) {\n                icon.className = 'bi bi-cloud-slash';\n                googleTtsBtn.style.opacity = '0.3';\n                googleTtsBtn.title = 'Google TTS - Clique para configurar API Key';\n            } else if (this.isEnabled) {\n                icon.className = 'bi bi-cloud-check';\n                googleTtsBtn.style.opacity = '1';\n                googleTtsBtn.style.color = '#00ff88';\n                googleTtsBtn.title = 'Google TTS Ativo - Clique para desativar';\n            } else {\n                icon.className = 'bi bi-cloud';\n                googleTtsBtn.style.opacity = '0.5';\n                googleTtsBtn.style.color = '';\n                googleTtsBtn.title = 'Google TTS Inativo - Clique para ativar';\n            }\n        }\n    }\n\n    integrateWithSettings() {\n        // Adicionar opções do Google TTS ao menu principal\n        const originalShowJarvisSettings = window.showJarvisSettings;\n        \n        window.showJarvisSettings = () => {\n            const options = [\n                '🔧 Configurar URL da API',\n                '🎤 Configurações de Voz',\n                '🌐 Google Cloud TTS',\n                '🧪 Testar Microfone',\n                '🔊 Testar Text-to-Speech',\n                '📊 Diagnóstico do Sistema',\n                '📝 Ver Logs do Console',\n                '❌ Cancelar'\n            ];\n            \n            const choice = prompt(`Configurações do Jarvis:\\\n\\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\\n')}\\\n\\\nEscolha uma opção (1-${options.length}):`);\n            \n            switch(choice) {\n                case '3':\n                    this.showGoogleTTSSettings();\n                    break;\n                default:\n                    // Chamar função original para outras opções\n                    if (originalShowJarvisSettings) {\n                        // Ajustar índice para função original\n                        const adjustedChoice = choice <= '2' ? choice : (parseInt(choice) - 1).toString();\n                        originalShowJarvisSettings(adjustedChoice);\n                    }\n                    break;\n            }\n        };\n    }\n\n    showGoogleTTSSettings() {\n        const status = this.apiKey ? (this.isEnabled ? '✅ Ativo' : '⏸️ Inativo') : '❌ Não configurado';\n        const currentVoice = this.availableVoices[this.settings.languageCode][this.settings.voiceName];\n        \n        const options = [\n            `📊 Status: ${status}`,\n            `🔑 ${this.apiKey ? 'Reconfigurar' : 'Configurar'} API Key`,\n            `🎤 Voz: ${this.settings.voiceName} (${currentVoice.description})`,\n            `⚡ Velocidade: ${this.settings.speakingRate}`,\n            `🎵 Tom: ${this.settings.pitch}`,\n            `🔊 Volume: ${this.settings.volumeGainDb}dB`,\n            `🔄 Fallback TTS Nativo: ${this.settings.fallbackToNative ? 'Sim' : 'Não'}`,\n            '🧪 Testar Google TTS',\n            '📊 Verificar Cota',\n            '🔄 Resetar Configurações',\n            '❌ Voltar'\n        ];\n        \n        const choice = prompt(`Google Cloud Text-to-Speech:\\\n\\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\\n')}\\\n\\\nEscolha uma opção (1-${options.length}):`);\n        \n        switch(choice) {\n            case '2':\n                this.setupApiKey();\n                break;\n            case '3':\n                this.selectGoogleVoice();\n                break;\n            case '4':\n                this.adjustSpeakingRate();\n                break;\n            case '5':\n                this.adjustPitch();\n                break;\n            case '6':\n                this.adjustVolumeGain();\n                break;\n            case '7':\n                this.toggleFallback();\n                break;\n            case '8':\n                this.testGoogleTTS();\n                break;\n            case '9':\n                this.checkQuota();\n                break;\n            case '10':\n                this.resetGoogleSettings();\n                break;\n            default:\n                return;\n        }\n    }\n\n    selectGoogleVoice() {\n        const voices = this.availableVoices[this.settings.languageCode];\n        const voiceOptions = Object.entries(voices).map(([name, info], index) => \n            `${index + 1}. ${name} - ${info.description} (${info.type})`\n        );\n        \n        const choice = prompt(`Selecione uma voz do Google:\\\n\\\n${voiceOptions.join('\\\n')}\\\n\\\nDigite o número da voz:`);\n        \n        const voiceIndex = parseInt(choice) - 1;\n        const voiceNames = Object.keys(voices);\n        \n        if (voiceIndex >= 0 && voiceIndex < voiceNames.length) {\n            const selectedVoice = voiceNames[voiceIndex];\n            this.settings.voiceName = selectedVoice;\n            this.settings.ssmlGender = voices[selectedVoice].gender;\n            this.saveSettings();\n            alert(`✅ Voz selecionada: ${selectedVoice}`);\n            this.testGoogleTTS();\n        }\n    }\n\n    adjustSpeakingRate() {\n        const newRate = prompt(`Velocidade da fala (0.25 - 4.0):\\\n\\\nAtual: ${this.settings.speakingRate}\\\n\\\nDigite a nova velocidade:`, this.settings.speakingRate);\n        const rate = parseFloat(newRate);\n        \n        if (!isNaN(rate) && rate >= 0.25 && rate <= 4.0) {\n            this.settings.speakingRate = rate;\n            this.saveSettings();\n            alert(`✅ Velocidade ajustada para: ${rate}`);\n            this.testGoogleTTS();\n        } else if (newRate !== null) {\n            alert('❌ Valor inválido. Use um número entre 0.25 e 4.0');\n        }\n    }\n\n    adjustPitch() {\n        const newPitch = prompt(`Tom da voz (-20.0 a 20.0):\\\n\\\nAtual: ${this.settings.pitch}\\\n\\\nDigite o novo tom:`, this.settings.pitch);\n        const pitch = parseFloat(newPitch);\n        \n        if (!isNaN(pitch) && pitch >= -20.0 && pitch <= 20.0) {\n            this.settings.pitch = pitch;\n            this.saveSettings();\n            alert(`✅ Tom ajustado para: ${pitch}`);\n            this.testGoogleTTS();\n        } else if (newPitch !== null) {\n            alert('❌ Valor inválido. Use um número entre -20.0 e 20.0');\n        }\n    }\n\n    adjustVolumeGain() {\n        const newVolume = prompt(`Ganho de volume (-96.0 a 16.0 dB):\\\n\\\nAtual: ${this.settings.volumeGainDb}dB\\\n\\\nDigite o novo ganho:`, this.settings.volumeGainDb);\n        const volume = parseFloat(newVolume);\n        \n        if (!isNaN(volume) && volume >= -96.0 && volume <= 16.0) {\n            this.settings.volumeGainDb = volume;\n            this.saveSettings();\n            alert(`✅ Ganho de volume ajustado para: ${volume}dB`);\n            this.testGoogleTTS();\n        } else if (newVolume !== null) {\n            alert('❌ Valor inválido. Use um número entre -96.0 e 16.0');\n        }\n    }\n\n    toggleFallback() {\n        this.settings.fallbackToNative = !this.settings.fallbackToNative;\n        this.saveSettings();\n        alert(`✅ Fallback para TTS nativo ${this.settings.fallbackToNative ? 'ativado' : 'desativado'}`);\n    }\n\n    testGoogleTTS() {\n        if (!this.isEnabled || !this.apiKey) {\n            alert('❌ Google TTS não está configurado. Configure a API Key primeiro.');\n            return;\n        }\n        \n        const testPhrases = [\n            'Olá! Eu sou o Jarvis com Google Cloud Text-to-Speech.',\n            'Sistema de voz premium funcionando perfeitamente.',\n            'Qualidade de áudio superior com tecnologia Google.',\n            'Como posso ajudá-lo hoje?'\n        ];\n        \n        const randomPhrase = testPhrases[Math.floor(Math.random() * testPhrases.length)];\n        this.speak(randomPhrase).catch(error => {\n            alert(`❌ Erro no teste: ${error.message}`);\n        });\n    }\n\n    checkQuota() {\n        const info = `\n📊 INFORMAÇÕES DE COTA GOOGLE CLOUD TTS\n\n💰 COTA GRATUITA MENSAL:\n• Standard: 4.000.000 caracteres\n• WaveNet/Neural2: 1.000.000 caracteres\n• Studio: 1.000.000 caracteres\n\n💵 PREÇOS APÓS COTA:\n• Standard: $4.00 por 1M caracteres\n• WaveNet/Neural2: $16.00 por 1M caracteres\n• Studio: $160.00 por 1M caracteres\n\n📈 VERIFICAR USO:\n1. Acesse: https://console.cloud.google.com/\n2. Vá em \"Faturamento\" > \"Relatórios\"\n3. Filtre por \"Cloud Text-to-Speech API\"\n\n🔗 DOCUMENTAÇÃO:\nhttps://cloud.google.com/text-to-speech/pricing\n        `;\n        \n        alert(info);\n    }\n\n    resetGoogleSettings() {\n        if (confirm('🔄 Resetar todas as configurações do Google TTS?\\n\\n⚠️ Isso NÃO removerá sua API Key.')) {\n            const apiKey = this.apiKey; // Preservar API key\n            \n            this.settings = {\n                languageCode: 'pt-BR',\n                voiceName: 'pt-BR-Standard-A',\n                ssmlGender: 'FEMALE',\n                audioEncoding: 'MP3',\n                speakingRate: 1.0,\n                pitch: 0.0,\n                volumeGainDb: 0.0,\n                autoSpeak: true,\n                fallbackToNative: true\n            };\n            \n            this.apiKey = apiKey; // Restaurar API key\n            this.saveSettings();\n            alert('✅ Configurações do Google TTS resetadas!');\n        }\n    }\n\n    // Método público para ser chamado pelo main.js\n    speakResponse(text) {\n        if (this.settings.autoSpeak && this.isEnabled && this.apiKey) {\n            this.speak(text).catch(error => {\n                console.error('❌ Erro no Google TTS:', error);\n            });\n        }\n    }\n}\n\n// Inicializar Google TTS quando o documento estiver pronto\nlet jarvisGoogleTTS = null;\n\n$(document).ready(function() {\n    // Aguardar um pouco para garantir que tudo foi carregado\n    setTimeout(() => {\n        jarvisGoogleTTS = new JarvisGoogleTTS();\n        \n        // Tornar disponível globalmente\n        window.jarvisGoogleTTS = jarvisGoogleTTS;\n        \n        console.log('🌐 Jarvis Google Cloud TTS integrado com sucesso!');\n    }, 1500);\n});\n\n// Exportar para uso em outros scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = JarvisGoogleTTS;\n}"