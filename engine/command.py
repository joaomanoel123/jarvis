import pyttsx3
import speech_recognition as sr
import eel
import time
import platform
import numpy as np
try:
    import pyaudio
    PYAUDIO_AVAILABLE = True
except ImportError:
    PYAUDIO_AVAILABLE = False
    print("‚ö†Ô∏è PyAudio n√£o dispon√≠vel - algumas otimiza√ß√µes de √°udio podem n√£o funcionar")

def speak(text):
    text = str(text)
    engine = None
    try:
        # Detectar sistema operacional e usar driver apropriado
        if platform.system() == "Windows":
            engine = pyttsx3.init('sapi5')
        elif platform.system() == "Darwin":  # macOS
            engine = pyttsx3.init('nsss')
        else:  # Linux
            engine = pyttsx3.init('espeak')
        
        # Configurar voz para portugu√™s brasileiro
        try:
            voices = engine.getProperty('voices')
            if voices:
                # Procurar por voz em portugu√™s brasileiro
                pt_voice = None
                for voice in voices:
                    if 'pt' in voice.id.lower() or 'brazil' in voice.id.lower() or 'portuguese' in voice.id.lower():
                        pt_voice = voice.id
                        break
                
                if pt_voice:
                    engine.setProperty('voice', pt_voice)
                    print(f"üáßüá∑ Usando voz em portugu√™s: {pt_voice}")
                else:
                    # Usar primeira voz dispon√≠vel
                    engine.setProperty('voice', voices[0].id)
                    print(f"üîä Usando voz padr√£o: {voices[0].id}")
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel configurar voz: {e}")
        
        # Configurar velocidade e outras propriedades
        try:
            engine.setProperty('rate', 150)  # Velocidade mais natural
            engine.setProperty('volume', 0.9)  # Volume
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel configurar propriedades: {e}")
        
        # Exibir mensagem na interface
        try:
            eel.DisplayMessage(text)
            eel.receiverText(text)
        except:
            pass  # Ignorar se interface n√£o estiver dispon√≠vel
        
        # Falar o texto com tratamento de erro melhorado
        engine.say(text)
        engine.runAndWait()
        
        # Limpar engine para evitar refer√™ncias fracas
        try:
            engine.stop()
        except:
            pass
        
    except Exception as e:
        print(f"‚ùå Erro no text-to-speech: {e}")
        print(f"üìù Texto: {text}")
        # Fallback: apenas exibir na interface
        try:
            eel.DisplayMessage(text)
            eel.receiverText(text)
        except:
            pass
    finally:
        # Garantir limpeza do engine
        if engine:
            try:
                del engine
            except:
                pass


def takecommand():
    """Fun√ß√£o de reconhecimento de voz com qualidade de √°udio cristalina e tratamento robusto"""
    r = None
    source = None
    
    try:
        r = sr.Recognizer()
        
        # Detectar melhor microfone dispon√≠vel
        best_mic = get_best_microphone()
    
        # Configurar reconhecedor para qualidade de √°udio superior
        if r is not None:
            try:
                r.energy_threshold = 400  # Aumentado para melhor detec√ß√£o
                r.dynamic_energy_threshold = True
                r.pause_threshold = 0.6  # Otimizado para captura mais precisa
                r.phrase_threshold = 0.2  # Mais sens√≠vel para in√≠cio de frase
                r.non_speaking_duration = 0.4  # Ajustado para melhor detec√ß√£o
                print('‚úÖ Reconhecedor configurado com par√¢metros otimizados')
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao configurar reconhecedor: {e}")
                return "erro_critico"
        else:
            print("‚ùå Reconhecedor √© None")
            return "erro_critico"
    
        # Configurar microfone com qualidade superior e tratamento de erro
        mic_config = {
            'sample_rate': 16000,  # Taxa de amostragem otimizada para voz
            'chunk_size': 1024     # Tamanho de chunk para melhor qualidade
        }
        
        # Usar melhor microfone se detectado e v√°lido
        if best_mic and hasattr(best_mic, 'device_index'):
            try:
                mic_config['device_index'] = best_mic.device_index
                print(f"üé§ Usando microfone premium (index: {best_mic.device_index})")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao configurar microfone premium: {e}")
                # Continuar sem device_index (usar padr√£o)
        
        # Tentar criar microfone com configura√ß√µes otimizadas
        try:
            source = sr.Microphone(**mic_config)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro com configura√ß√µes otimizadas: {e}")
            # Fallback para microfone b√°sico
            try:
                source = sr.Microphone()
                print("üé§ Usando microfone com configura√ß√µes b√°sicas")
            except Exception as e2:
                print(f"‚ùå Erro cr√≠tico ao criar microfone: {e2}")
                return "erro_microfone"
        
        if source is None:
            print("‚ùå Microfone n√£o dispon√≠vel")
            return "erro_microfone"
            
        with source:
            print('üéß Ouvindo com qualidade cristalina...')
            try:
                eel.DisplayMessage('üéß Ouvindo com qualidade cristalina...')
            except:
                pass
            
            # Calibra√ß√£o avan√ßada para ru√≠do ambiente
            print('üîä Calibrando microfone para qualidade superior...')
            r.adjust_for_ambient_noise(source, duration=1.5)  # Mais tempo para melhor calibra√ß√£o
            
            # Configurar ganho do microfone se poss√≠vel
            try:
                if (PYAUDIO_AVAILABLE and 
                    source is not None and 
                    hasattr(source, 'stream') and 
                    source.stream is not None):
                    print('üéµ Otimizando configura√ß√µes de √°udio...')
                    # Aplicar configura√ß√µes avan√ßadas se dispon√≠veis
                    _optimize_audio_settings(source)
            except Exception as e:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel otimizar √°udio: {e}")
            
            # Escutar com configura√ß√µes otimizadas para qualidade
            try:
                print('üé§ Fale agora (qualidade cristalina ativa)...')
                try:
                    eel.DisplayMessage('üé§ Fale agora (qualidade cristalina)...')
                except:
                    pass
                
                # Timeout otimizado: 6s para come√ßar, 4s de frase (mais tempo para qualidade)
                audio = r.listen(
                    source, 
                    timeout=6, 
                    phrase_time_limit=4
                )
                
            except sr.WaitTimeoutError:
                print('‚è∞ Timeout: Nenhuma fala detectada')
                try:
                    eel.DisplayMessage('‚è∞ Timeout: Tente novamente')
                except:
                    pass
                return "timeout"
            
            except Exception as e:
                print(f'‚ùå Erro ao capturar √°udio: {e}')
                try:
                    eel.DisplayMessage('‚ùå Erro no microfone')
                except:
                    pass
                return "erro_microfone"

        # Reconhecimento de voz com qualidade superior
        try:
            print('üîç Processando √°udio cristalino...')
            try:
                eel.DisplayMessage('üîç Processando √°udio cristalino...')
            except:
                pass
            
            # Reconhecimento com configura√ß√µes avan√ßadas
            query = r.recognize_google(
                audio, 
                language='pt-BR',
                show_all=False  # Apenas melhor resultado
            )
            
            if query:
                print(f"üë§ Usu√°rio disse: {query}")
                try:
                    eel.DisplayMessage(f"üë§ Voc√™ disse: {query}")
                except:
                    pass
                time.sleep(1)
                return query.lower()
            else:
                print('‚ö†Ô∏è Reconhecimento vazio')
                return ""
                
        except sr.UnknownValueError:
            print('‚ùå N√£o foi poss√≠vel entender o √°udio')
            try:
                eel.DisplayMessage('‚ùå N√£o entendi. Tente novamente.')
            except:
                pass
            return "nao_entendi"
            
        except sr.RequestError as e:
            print(f'‚ùå Erro no servi√ßo de reconhecimento: {e}')
            try:
                eel.DisplayMessage('‚ùå Erro de conex√£o. Tente novamente.')
            except:
                pass
            return "erro_servico"
            
        except Exception as e:
            print(f'‚ùå Erro inesperado no reconhecimento: {e}')
            try:
                eel.DisplayMessage('‚ùå Erro inesperado. Tente novamente.')
            except:
                pass
            return "erro_geral"
            
    except Exception as e:
        print(f'‚ùå Erro cr√≠tico no takecommand: {e}')
        print(f'üîç Tipo do erro: {type(e).__name__}')
        print(f'üìù Detalhes: {str(e)}')
        
        # Tratamento espec√≠fico para erro de 'close'
        if "'NoneType' object has no attribute 'close'" in str(e):
            print("‚ö†Ô∏è Erro de refer√™ncia None detectado - problema com microfone")
            try:
                eel.DisplayMessage('‚ùå Erro no microfone. Verifique as permiss√µes e tente novamente.')
            except:
                pass
            return "erro_microfone"
        
        try:
            eel.DisplayMessage('‚ùå Erro no sistema de voz. Reinicie o sistema.')
        except:
            pass
        return "erro_critico"
    
    finally:
        # Limpeza segura de recursos
        try:
            if source is not None and hasattr(source, 'stream'):
                if source.stream is not None:
                    try:
                        source.stream.close()
                    except:
                        pass
        except Exception as cleanup_error:
            print(f"‚ö†Ô∏è Erro na limpeza: {cleanup_error}")

def _optimize_audio_settings(source):
    """Otimizar configura√ß√µes de √°udio para qualidade cristalina com tratamento robusto"""
    try:
        if not PYAUDIO_AVAILABLE:
            print("‚ö†Ô∏è PyAudio n√£o dispon√≠vel para otimiza√ß√µes")
            return
        
        if source is None:
            print("‚ö†Ô∏è Source √© None, n√£o √© poss√≠vel otimizar")
            return
        
        # Configurar par√¢metros de √°udio para melhor qualidade
        if hasattr(source, 'stream') and source.stream is not None:
            print('üîß Aplicando otimiza√ß√µes de √°udio...')
            
            # Tentar configurar par√¢metros do stream
            try:
                # Verificar se o stream est√° ativo
                if hasattr(source.stream, 'is_active') and source.stream.is_active():
                    print('‚úÖ Stream ativo, otimiza√ß√µes aplicadas')
                else:
                    print('‚ö†Ô∏è Stream n√£o est√° ativo')
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao verificar stream: {e}")
        else:
            print("‚ö†Ô∏è Stream n√£o dispon√≠vel para otimiza√ß√£o")
                
    except Exception as e:
        print(f"‚ùå Erro na otimiza√ß√£o de √°udio: {e}")
        print(f"üîç Tipo do erro: {type(e).__name__}")

def get_best_microphone():
    """Detectar e retornar o melhor microfone dispon√≠vel com tratamento robusto"""
    try:
        if not PYAUDIO_AVAILABLE:
            print("‚ö†Ô∏è PyAudio n√£o dispon√≠vel, usando microfone padr√£o")
            return None
            
        # Listar microfones dispon√≠veis com tratamento de erro
        try:
            mic_list = sr.Microphone.list_microphone_names()
            if not mic_list:
                print("‚ö†Ô∏è Nenhum microfone detectado")
                return None
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao listar microfones: {e}")
            return None
        
        # Procurar por microfones de alta qualidade
        preferred_mics = [
            'USB', 'Blue', 'Audio-Technica', 'Shure', 'Rode', 
            'Samson', 'HyperX', 'SteelSeries', 'Logitech'
        ]
        
        for i, mic_name in enumerate(mic_list):
            if mic_name:  # Verificar se mic_name n√£o √© None
                for preferred in preferred_mics:
                    if preferred.lower() in mic_name.lower():
                        try:
                            # Testar se o microfone √© v√°lido
                            test_mic = sr.Microphone(device_index=i)
                            print(f"üé§ Microfone de alta qualidade detectado: {mic_name}")
                            return test_mic
                        except Exception as e:
                            print(f"‚ö†Ô∏è Erro ao testar microfone {mic_name}: {e}")
                            continue
        
        # Se n√£o encontrar microfone premium, testar microfone padr√£o
        try:
            test_default = sr.Microphone()
            print(f"üé§ Usando microfone padr√£o")
            return test_default
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao criar microfone padr√£o: {e}")
            return None
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico ao detectar microfone: {e}")
        return None

def enhance_audio_quality():
    """Aplicar melhorias de qualidade de √°udio"""
    print("üéµ OTIMIZA√á√ïES DE QUALIDADE DE √ÅUDIO ATIVAS:")
    print("  ‚Ä¢ Taxa de amostragem: 16kHz (otimizada para voz)")
    print("  ‚Ä¢ Chunk size: 1024 (melhor qualidade)")
    print("  ‚Ä¢ Energy threshold: 400 (detec√ß√£o aprimorada)")
    print("  ‚Ä¢ Pause threshold: 0.6s (precis√£o otimizada)")
    print("  ‚Ä¢ Calibra√ß√£o: 1.5s (redu√ß√£o de ru√≠do)")
    print("  ‚Ä¢ Timeout: 6s + 4s (qualidade priorit√°ria)")
    print("  ‚Ä¢ Reconhecimento: Google pt-BR (melhor resultado)")

@eel.expose
def allCommands(message=1):
    """Processar comandos com tratamento robusto de erros"""
    
    if message == 1:
        query = takecommand()
        print(f"üìù Query recebida: '{query}'")
        
        # Tratar casos especiais de erro
        if query in ["timeout", "erro_microfone", "nao_entendi", "erro_servico", "erro_geral", "erro_critico"]:
            error_messages = {
                "timeout": "Tempo esgotado. Clique no microfone e tente novamente.",
                "erro_microfone": "Problema com o microfone. Verifique as permiss√µes.",
                "nao_entendi": "N√£o consegui entender. Fale mais claramente.",
                "erro_servico": "Problema de conex√£o. Verifique sua internet.",
                "erro_geral": "Erro no reconhecimento. Tente novamente.",
                "erro_critico": "Erro cr√≠tico. Reinicie o sistema."
            }
            
            error_msg = error_messages.get(query, "Erro desconhecido")
            print(f"‚ö†Ô∏è {error_msg}")
            
            try:
                eel.senderText(f"Erro: {error_msg}")
                eel.DisplayMessage(error_msg)
                speak(error_msg)
            except:
                pass
            
            # Retornar sem processar comando
            try:
                eel.ShowHood()
            except:
                pass
            return
        
        # Se query est√° vazia, n√£o processar
        if not query or query.strip() == "":
            print("‚ö†Ô∏è Query vazia, n√£o processando")
            try:
                eel.senderText("Comando vazio")
                eel.DisplayMessage("Nenhum comando detectado")
            except:
                pass
            try:
                eel.ShowHood()
            except:
                pass
            return
        
        try:
            eel.senderText(query)
        except:
            pass
    else:
        query = message
        try:
            eel.senderText(query)
        except:
            pass
    
    try:

        # Comandos em portugu√™s brasileiro
        if "abrir whatsapp" in query or "abra whatsapp" in query or "whatsapp" in query:
            from engine.features import openWhatsApp
            openWhatsApp()
        elif "abrir" in query or "abra" in query:
            from engine.features import openCommand
            openCommand(query)
        elif "youtube" in query or "reproduzir" in query or "tocar" in query:
            from engine.features import PlayYoutube
            PlayYoutube(query)
        elif "pesquisar" in query or "pesquise" in query or "buscar" in query or "google" in query:
            from engine.features import searchGoogle
            searchGoogle(query)
        elif "enviar mensagem" in query or "ligar" in query or "videochamada" in query:
            from engine.features import findContact, whatsApp, makeCall, sendMessage
            contact_no, name = findContact(query)
            if(contact_no != 0):
                speak("Qual modo voc√™ quer usar: WhatsApp ou celular?")
                preferance = takecommand()
                print(preferance)

                if "celular" in preferance or "mobile" in preferance:
                    if "enviar mensagem" in query or "sms" in query: 
                        speak("Qual mensagem enviar?")
                        message = takecommand()
                        sendMessage(message, contact_no, name)
                    elif "ligar" in query:
                        makeCall(name, contact_no)
                    else:
                        speak("Por favor, tente novamente")
                elif "whatsapp" in preferance:
                    message = ""
                    if "enviar mensagem" in query:
                        message = 'message'
                        speak("Qual mensagem enviar?")
                        query = takecommand()
                                        
                    elif "ligar" in query:
                        message = 'call'
                    else:
                        message = 'video call'
                                        
                    whatsApp(contact_no, query, message, name)
        
        # Comandos em ingl√™s (compatibilidade)
        elif "open whatsapp" in query or "whatsapp" in query:
            from engine.features import openWhatsApp
            openWhatsApp()
        elif "open" in query:
            from engine.features import openCommand
            openCommand(query)
        elif "on youtube" in query:
            from engine.features import PlayYoutube
            PlayYoutube(query)
        elif "send message" in query or "phone call" in query or "video call" in query:
            from engine.features import findContact, whatsApp, makeCall, sendMessage
            contact_no, name = findContact(query)
            if(contact_no != 0):
                speak("Which mode you want to use whatsapp or mobile")
                preferance = takecommand()
                print(preferance)

                if "mobile" in preferance:
                    if "send message" in query or "send sms" in query: 
                        speak("what message to send")
                        message = takecommand()
                        sendMessage(message, contact_no, name)
                    elif "phone call" in query:
                        makeCall(name, contact_no)
                    else:
                        speak("please try again")
                elif "whatsapp" in preferance:
                    message = ""
                    if "send message" in query:
                        message = 'message'
                        speak("what message to send")
                        query = takecommand()
                                        
                    elif "phone call" in query:
                        message = 'call'
                    else:
                        message = 'video call'
                                        
                    whatsApp(contact_no, query, message, name)

        else:
            # Usar chatbot Gemini como padr√£o
            from engine.features import chatBotGemini
            chatBotGemini(query)
            
    except Exception as e:
        print(f"‚ùå Erro no processamento do comando: {e}")
        try:
            eel.DisplayMessage(f"Erro: {str(e)}")
            speak("Desculpe, ocorreu um erro ao processar seu comando")
        except:
            pass
    
    finally:
        # Sempre tentar mostrar o hood
        try:
            eel.ShowHood()
        except:
            pass
